{"remainingRequest":"E:\\Angular2\\i18n-polyfill-master\\example\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\Angular2\\i18n-polyfill-master\\dist\\fesm5\\ngx-translate-i18n-polyfill.js","dependencies":[{"path":"E:\\Angular2\\i18n-polyfill-master\\dist\\fesm5\\ngx-translate-i18n-polyfill.js","mtime":1528389518321},{"path":"E:\\Angular2\\i18n-polyfill-master\\example\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528389707021},{"path":"E:\\Angular2\\i18n-polyfill-master\\example\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_angular_common,_angular_core PURE_IMPORTS_END */\nimport { __spread, __extends, __read } from 'tslib';\nimport { I18nPluralPipe, I18nSelectPipe, NgLocaleLocalization } from '@angular/common';\nimport { MissingTranslationStrategy, Inject, Injectable, InjectionToken, LOCALE_ID, Optional, TRANSLATIONS, TRANSLATIONS_FORMAT } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Text = /*@__PURE__*/ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitText(this, context);\n        };\n    return Text;\n}());\nvar Expansion = /*@__PURE__*/ (function () {\n    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Expansion.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitExpansion(this, context);\n        };\n    return Expansion;\n}());\nvar ExpansionCase = /*@__PURE__*/ (function () {\n    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpansionCase.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitExpansionCase(this, context);\n        };\n    return ExpansionCase;\n}());\nvar Attribute = /*@__PURE__*/ (function () {\n    function Attribute(name, value, sourceSpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Attribute.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitAttribute(this, context);\n        };\n    return Attribute;\n}());\nvar Element = /*@__PURE__*/ (function () {\n    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {\n        if (startSourceSpan === void 0) {\n            startSourceSpan = null;\n        }\n        if (endSourceSpan === void 0) {\n            endSourceSpan = null;\n        }\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Element.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitElement(this, context);\n        };\n    return Element;\n}());\nvar Comment = /*@__PURE__*/ (function () {\n    function Comment(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Comment.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitComment(this, context);\n        };\n    return Comment;\n}());\n/**\n * @param {?} visitor\n * @param {?} nodes\n * @param {?=} context\n * @return {?}\n */\nfunction visitAll(visitor, nodes, context) {\n    if (context === void 0) {\n        context = null;\n    }\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ visit = visitor.visit\n        ? function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); }\n        : function (ast) { return ast.visit(visitor, context); };\n    nodes.forEach(function (ast) {\n        var /** @type {?} */ astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Message = /*@__PURE__*/ (function () {\n    /**\n     * @param source message AST\n     * @param placeholders maps placeholder names to static content\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param id\n     */\n    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.id = id;\n        if (nodes.length) {\n            this.sources = [\n                {\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }\n            ];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n    return Message;\n}());\nvar Text$1 = /*@__PURE__*/ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitText(this, context);\n        };\n    return Text;\n}());\nvar Container = /*@__PURE__*/ (function () {\n    function Container(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Container.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitContainer(this, context);\n        };\n    return Container;\n}());\nvar Icu = /*@__PURE__*/ (function () {\n    function Icu(expression, type, cases, sourceSpan) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Icu.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitIcu(this, context);\n        };\n    return Icu;\n}());\nvar TagPlaceholder = /*@__PURE__*/ (function () {\n    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    TagPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitTagPlaceholder(this, context);\n        };\n    return TagPlaceholder;\n}());\nvar Placeholder = /*@__PURE__*/ (function () {\n    function Placeholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Placeholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitPlaceholder(this, context);\n        };\n    return Placeholder;\n}());\nvar IcuPlaceholder = /*@__PURE__*/ (function () {\n    function IcuPlaceholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    IcuPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            return visitor.visitIcuPlaceholder(this, context);\n        };\n    return IcuPlaceholder;\n}());\nvar RecurseVisitor = /*@__PURE__*/ (function () {\n    function RecurseVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n        function (text, context) { };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n        function (container, context) {\n            var _this = this;\n            container.children.forEach(function (child) { return child.visit(_this); });\n        };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var _this = this;\n            Object.keys(icu.cases).forEach(function (k) {\n                icu.cases[k].visit(_this);\n            });\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            var _this = this;\n            ph.children.forEach(function (child) { return child.visit(_this); });\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) { };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) { };\n    return RecurseVisitor;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Text$2 = /*@__PURE__*/ (function () {\n    function Text(value) {\n        this.value = value;\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n        function (visitor) {\n            return visitor.visitText(this);\n        };\n    return Text;\n}());\nvar CR = /*@__PURE__*/ (function (_super) {\n    __extends(CR, _super);\n    function CR(ws) {\n        if (ws === void 0) {\n            ws = 0;\n        }\n        return _super.call(this, \"\\n\" + new Array(ws + 1).join(\" \")) || this;\n    }\n    return CR;\n}(Text$2));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */ ParseLocation = /*@__PURE__*/ (function () {\n    function ParseLocation(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    /**\n     * @return {?}\n     */\n    ParseLocation.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return this.offset != null ? this.line + \":\" + this.col : \"\";\n        };\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n    ParseLocation.prototype.getContext = /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n        function (maxChars, maxLines) {\n            var /** @type {?} */ content = this.file.content;\n            var /** @type {?} */ startOffset = this.offset;\n            if (startOffset != null) {\n                if (startOffset > content.length - 1) {\n                    startOffset = content.length - 1;\n                }\n                var /** @type {?} */ endOffset = startOffset;\n                var /** @type {?} */ ctxChars = 0;\n                var /** @type {?} */ ctxLines = 0;\n                while (ctxChars < maxChars && startOffset > 0) {\n                    startOffset--;\n                    ctxChars++;\n                    if (content[startOffset] === \"\\n\") {\n                        if (++ctxLines === maxLines) {\n                            break;\n                        }\n                    }\n                }\n                ctxChars = 0;\n                ctxLines = 0;\n                while (ctxChars < maxChars && endOffset < content.length - 1) {\n                    endOffset++;\n                    ctxChars++;\n                    if (content[endOffset] === \"\\n\") {\n                        if (++ctxLines === maxLines) {\n                            break;\n                        }\n                    }\n                }\n                return {\n                    before: content.substring(startOffset, this.offset),\n                    after: content.substring(this.offset, endOffset + 1)\n                };\n            }\n            return null;\n        };\n    return ParseLocation;\n}());\nvar ParseSourceFile = /*@__PURE__*/ (function () {\n    function ParseSourceFile(content, url) {\n        if (url === void 0) {\n            url = \"\";\n        }\n        this.content = content;\n        this.url = url;\n    }\n    return ParseSourceFile;\n}());\nvar ParseSourceSpan = /*@__PURE__*/ (function () {\n    function ParseSourceSpan(start, end, details) {\n        if (details === void 0) {\n            details = null;\n        }\n        this.start = start;\n        this.end = end;\n        this.details = details;\n    }\n    /**\n     * @return {?}\n     */\n    ParseSourceSpan.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return this.start.file.content.substring(this.start.offset, this.end.offset);\n        };\n    return ParseSourceSpan;\n}());\n/** @enum {number} */\nvar ParseErrorLevel = /*@__PURE__*/ (function () {\n    var ParseErrorLevel = {\n        WARNING: 0,\n        ERROR: 1,\n    };\n    ParseErrorLevel[ParseErrorLevel.WARNING] = \"WARNING\";\n    ParseErrorLevel[ParseErrorLevel.ERROR] = \"ERROR\";\n    return ParseErrorLevel;\n}());\nvar ParseError = /*@__PURE__*/ (function () {\n    function ParseError(span, msg, level) {\n        if (level === void 0) {\n            level = ParseErrorLevel.ERROR;\n        }\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.contextualMessage = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ ctx = this.span.start.getContext(100, 3);\n            return ctx ? \" (\\\"\" + ctx.before + \"[\" + ParseErrorLevel[this.level] + \" ->]\" + ctx.after + \"\\\")\" : \"\";\n        };\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ details = this.span.details ? \", \" + this.span.details : \"\";\n            return \"\" + this.msg + this.contextualMessage() + \": \" + this.span.start + details;\n        };\n    return ParseError;\n}());\n/**\n * An i18n error.\n */\nvar /**\n * An i18n error.\n */ I18nError = /*@__PURE__*/ (function (_super) {\n    __extends(I18nError, _super);\n    function I18nError(span, msg) {\n        return _super.call(this, span, msg) || this;\n    }\n    return I18nError;\n}(ParseError));\n/**\n * @param {?} s\n * @return {?}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar InterpolationConfig = /*@__PURE__*/ (function () {\n    function InterpolationConfig(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    return InterpolationConfig;\n}());\nvar /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = /*@__PURE__*/ new InterpolationConfig(\"{{\", \"}}\");\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ $EOF = 0;\nvar /** @type {?} */ $TAB = 9;\nvar /** @type {?} */ $LF = 10;\nvar /** @type {?} */ $VTAB = 11;\nvar /** @type {?} */ $FF = 12;\nvar /** @type {?} */ $CR = 13;\nvar /** @type {?} */ $SPACE = 32;\nvar /** @type {?} */ $BANG = 33;\nvar /** @type {?} */ $DQ = 34;\nvar /** @type {?} */ $HASH = 35;\nvar /** @type {?} */ $$ = 36;\nvar /** @type {?} */ $PERCENT = 37;\nvar /** @type {?} */ $AMPERSAND = 38;\nvar /** @type {?} */ $SQ = 39;\nvar /** @type {?} */ $LPAREN = 40;\nvar /** @type {?} */ $RPAREN = 41;\nvar /** @type {?} */ $STAR = 42;\nvar /** @type {?} */ $PLUS = 43;\nvar /** @type {?} */ $COMMA = 44;\nvar /** @type {?} */ $MINUS = 45;\nvar /** @type {?} */ $PERIOD = 46;\nvar /** @type {?} */ $SLASH = 47;\nvar /** @type {?} */ $COLON = 58;\nvar /** @type {?} */ $SEMICOLON = 59;\nvar /** @type {?} */ $LT = 60;\nvar /** @type {?} */ $EQ = 61;\nvar /** @type {?} */ $GT = 62;\nvar /** @type {?} */ $QUESTION = 63;\nvar /** @type {?} */ $0 = 48;\nvar /** @type {?} */ $9 = 57;\nvar /** @type {?} */ $A = 65;\nvar /** @type {?} */ $E = 69;\nvar /** @type {?} */ $F = 70;\nvar /** @type {?} */ $X = 88;\nvar /** @type {?} */ $Z = 90;\nvar /** @type {?} */ $LBRACKET = 91;\nvar /** @type {?} */ $BACKSLASH = 92;\nvar /** @type {?} */ $RBRACKET = 93;\nvar /** @type {?} */ $CARET = 94;\nvar /** @type {?} */ $_ = 95;\nvar /** @type {?} */ $a = 97;\nvar /** @type {?} */ $e = 101;\nvar /** @type {?} */ $f = 102;\nvar /** @type {?} */ $n = 110;\nvar /** @type {?} */ $r = 114;\nvar /** @type {?} */ $t = 116;\nvar /** @type {?} */ $u = 117;\nvar /** @type {?} */ $v = 118;\nvar /** @type {?} */ $x = 120;\nvar /** @type {?} */ $z = 122;\nvar /** @type {?} */ $LBRACE = 123;\nvar /** @type {?} */ $BAR = 124;\nvar /** @type {?} */ $RBRACE = 125;\nvar /** @type {?} */ $NBSP = 160;\nvar /** @type {?} */ $BT = 96;\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || code === $NBSP;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigit(code) {\n    return $0 <= code && code <= $9;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isAsciiLetter(code) {\n    return (code >= $a && code <= $z) || (code >= $A && code <= $Z);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isAsciiHexDigit(code) {\n    return (code >= $a && code <= $f) || (code >= $A && code <= $F) || isDigit(code);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar TagContentType = /*@__PURE__*/ (function () {\n    var TagContentType = {\n        RAW_TEXT: 0,\n        ESCAPABLE_RAW_TEXT: 1,\n        PARSABLE_DATA: 2,\n    };\n    TagContentType[TagContentType.RAW_TEXT] = \"RAW_TEXT\";\n    TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\n    TagContentType[TagContentType.PARSABLE_DATA] = \"PARSABLE_DATA\";\n    return TagContentType;\n}());\n/**\n * @param {?} elementName\n * @return {?}\n */\nfunction splitNsName(elementName) {\n    if (elementName[0] !== \":\") {\n        return [null, elementName];\n    }\n    var /** @type {?} */ colonIndex = elementName.indexOf(\":\", 1);\n    if (colonIndex === -1) {\n        throw new Error(\"Unsupported format \\\"\" + elementName + \"\\\" expecting \\\":namespace:name\\\"\");\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nfunction isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === \"ng-container\";\n}\n/**\n * @param {?} fullName\n * @return {?}\n */\nfunction getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\n/**\n * @param {?} prefix\n * @param {?} localName\n * @return {?}\n */\nfunction mergeNsAndName(prefix, localName) {\n    return prefix ? \":\" + prefix + \":\" + localName : localName;\n}\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\n// see https://html.spec.whatwg.org/multipage/entities.json\n// This list is not exhaustive to keep the compiler footprint low.\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not\n// exist.\nvar /** @type {?} */ NAMED_ENTITIES = {\n    Aacute: \"\\u00C1\",\n    aacute: \"\\u00E1\",\n    Acirc: \"\\u00C2\",\n    acirc: \"\\u00E2\",\n    acute: \"\\u00B4\",\n    AElig: \"\\u00C6\",\n    aelig: \"\\u00E6\",\n    Agrave: \"\\u00C0\",\n    agrave: \"\\u00E0\",\n    alefsym: \"\\u2135\",\n    Alpha: \"\\u0391\",\n    alpha: \"\\u03B1\",\n    amp: \"&\",\n    and: \"\\u2227\",\n    ang: \"\\u2220\",\n    apos: \"\\u0027\",\n    Aring: \"\\u00C5\",\n    aring: \"\\u00E5\",\n    asymp: \"\\u2248\",\n    Atilde: \"\\u00C3\",\n    atilde: \"\\u00E3\",\n    Auml: \"\\u00C4\",\n    auml: \"\\u00E4\",\n    bdquo: \"\\u201E\",\n    Beta: \"\\u0392\",\n    beta: \"\\u03B2\",\n    brvbar: \"\\u00A6\",\n    bull: \"\\u2022\",\n    cap: \"\\u2229\",\n    Ccedil: \"\\u00C7\",\n    ccedil: \"\\u00E7\",\n    cedil: \"\\u00B8\",\n    cent: \"\\u00A2\",\n    Chi: \"\\u03A7\",\n    chi: \"\\u03C7\",\n    circ: \"\\u02C6\",\n    clubs: \"\\u2663\",\n    cong: \"\\u2245\",\n    copy: \"\\u00A9\",\n    crarr: \"\\u21B5\",\n    cup: \"\\u222A\",\n    curren: \"\\u00A4\",\n    dagger: \"\\u2020\",\n    Dagger: \"\\u2021\",\n    darr: \"\\u2193\",\n    dArr: \"\\u21D3\",\n    deg: \"\\u00B0\",\n    Delta: \"\\u0394\",\n    delta: \"\\u03B4\",\n    diams: \"\\u2666\",\n    divide: \"\\u00F7\",\n    Eacute: \"\\u00C9\",\n    eacute: \"\\u00E9\",\n    Ecirc: \"\\u00CA\",\n    ecirc: \"\\u00EA\",\n    Egrave: \"\\u00C8\",\n    egrave: \"\\u00E8\",\n    empty: \"\\u2205\",\n    emsp: \"\\u2003\",\n    ensp: \"\\u2002\",\n    Epsilon: \"\\u0395\",\n    epsilon: \"\\u03B5\",\n    equiv: \"\\u2261\",\n    Eta: \"\\u0397\",\n    eta: \"\\u03B7\",\n    ETH: \"\\u00D0\",\n    eth: \"\\u00F0\",\n    Euml: \"\\u00CB\",\n    euml: \"\\u00EB\",\n    euro: \"\\u20AC\",\n    exist: \"\\u2203\",\n    fnof: \"\\u0192\",\n    forall: \"\\u2200\",\n    frac12: \"\\u00BD\",\n    frac14: \"\\u00BC\",\n    frac34: \"\\u00BE\",\n    frasl: \"\\u2044\",\n    Gamma: \"\\u0393\",\n    gamma: \"\\u03B3\",\n    ge: \"\\u2265\",\n    gt: \">\",\n    harr: \"\\u2194\",\n    hArr: \"\\u21D4\",\n    hearts: \"\\u2665\",\n    hellip: \"\\u2026\",\n    Iacute: \"\\u00CD\",\n    iacute: \"\\u00ED\",\n    Icirc: \"\\u00CE\",\n    icirc: \"\\u00EE\",\n    iexcl: \"\\u00A1\",\n    Igrave: \"\\u00CC\",\n    igrave: \"\\u00EC\",\n    image: \"\\u2111\",\n    infin: \"\\u221E\",\n    int: \"\\u222B\",\n    Iota: \"\\u0399\",\n    iota: \"\\u03B9\",\n    iquest: \"\\u00BF\",\n    isin: \"\\u2208\",\n    Iuml: \"\\u00CF\",\n    iuml: \"\\u00EF\",\n    Kappa: \"\\u039A\",\n    kappa: \"\\u03BA\",\n    Lambda: \"\\u039B\",\n    lambda: \"\\u03BB\",\n    lang: \"\\u27E8\",\n    laquo: \"\\u00AB\",\n    larr: \"\\u2190\",\n    lArr: \"\\u21D0\",\n    lceil: \"\\u2308\",\n    ldquo: \"\\u201C\",\n    le: \"\\u2264\",\n    lfloor: \"\\u230A\",\n    lowast: \"\\u2217\",\n    loz: \"\\u25CA\",\n    lrm: \"\\u200E\",\n    lsaquo: \"\\u2039\",\n    lsquo: \"\\u2018\",\n    lt: \"<\",\n    macr: \"\\u00AF\",\n    mdash: \"\\u2014\",\n    micro: \"\\u00B5\",\n    middot: \"\\u00B7\",\n    minus: \"\\u2212\",\n    Mu: \"\\u039C\",\n    mu: \"\\u03BC\",\n    nabla: \"\\u2207\",\n    nbsp: \"\\u00A0\",\n    ndash: \"\\u2013\",\n    ne: \"\\u2260\",\n    ni: \"\\u220B\",\n    not: \"\\u00AC\",\n    notin: \"\\u2209\",\n    nsub: \"\\u2284\",\n    Ntilde: \"\\u00D1\",\n    ntilde: \"\\u00F1\",\n    Nu: \"\\u039D\",\n    nu: \"\\u03BD\",\n    Oacute: \"\\u00D3\",\n    oacute: \"\\u00F3\",\n    Ocirc: \"\\u00D4\",\n    ocirc: \"\\u00F4\",\n    OElig: \"\\u0152\",\n    oelig: \"\\u0153\",\n    Ograve: \"\\u00D2\",\n    ograve: \"\\u00F2\",\n    oline: \"\\u203E\",\n    Omega: \"\\u03A9\",\n    omega: \"\\u03C9\",\n    Omicron: \"\\u039F\",\n    omicron: \"\\u03BF\",\n    oplus: \"\\u2295\",\n    or: \"\\u2228\",\n    ordf: \"\\u00AA\",\n    ordm: \"\\u00BA\",\n    Oslash: \"\\u00D8\",\n    oslash: \"\\u00F8\",\n    Otilde: \"\\u00D5\",\n    otilde: \"\\u00F5\",\n    otimes: \"\\u2297\",\n    Ouml: \"\\u00D6\",\n    ouml: \"\\u00F6\",\n    para: \"\\u00B6\",\n    permil: \"\\u2030\",\n    perp: \"\\u22A5\",\n    Phi: \"\\u03A6\",\n    phi: \"\\u03C6\",\n    Pi: \"\\u03A0\",\n    pi: \"\\u03C0\",\n    piv: \"\\u03D6\",\n    plusmn: \"\\u00B1\",\n    pound: \"\\u00A3\",\n    prime: \"\\u2032\",\n    Prime: \"\\u2033\",\n    prod: \"\\u220F\",\n    prop: \"\\u221D\",\n    Psi: \"\\u03A8\",\n    psi: \"\\u03C8\",\n    quot: \"\\u0022\",\n    radic: \"\\u221A\",\n    rang: \"\\u27E9\",\n    raquo: \"\\u00BB\",\n    rarr: \"\\u2192\",\n    rArr: \"\\u21D2\",\n    rceil: \"\\u2309\",\n    rdquo: \"\\u201D\",\n    real: \"\\u211C\",\n    reg: \"\\u00AE\",\n    rfloor: \"\\u230B\",\n    Rho: \"\\u03A1\",\n    rho: \"\\u03C1\",\n    rlm: \"\\u200F\",\n    rsaquo: \"\\u203A\",\n    rsquo: \"\\u2019\",\n    sbquo: \"\\u201A\",\n    Scaron: \"\\u0160\",\n    scaron: \"\\u0161\",\n    sdot: \"\\u22C5\",\n    sect: \"\\u00A7\",\n    shy: \"\\u00AD\",\n    Sigma: \"\\u03A3\",\n    sigma: \"\\u03C3\",\n    sigmaf: \"\\u03C2\",\n    sim: \"\\u223C\",\n    spades: \"\\u2660\",\n    sub: \"\\u2282\",\n    sube: \"\\u2286\",\n    sum: \"\\u2211\",\n    sup: \"\\u2283\",\n    sup1: \"\\u00B9\",\n    sup2: \"\\u00B2\",\n    sup3: \"\\u00B3\",\n    supe: \"\\u2287\",\n    szlig: \"\\u00DF\",\n    Tau: \"\\u03A4\",\n    tau: \"\\u03C4\",\n    there4: \"\\u2234\",\n    Theta: \"\\u0398\",\n    theta: \"\\u03B8\",\n    thetasym: \"\\u03D1\",\n    thinsp: \"\\u2009\",\n    THORN: \"\\u00DE\",\n    thorn: \"\\u00FE\",\n    tilde: \"\\u02DC\",\n    times: \"\\u00D7\",\n    trade: \"\\u2122\",\n    Uacute: \"\\u00DA\",\n    uacute: \"\\u00FA\",\n    uarr: \"\\u2191\",\n    uArr: \"\\u21D1\",\n    Ucirc: \"\\u00DB\",\n    ucirc: \"\\u00FB\",\n    Ugrave: \"\\u00D9\",\n    ugrave: \"\\u00F9\",\n    uml: \"\\u00A8\",\n    upsih: \"\\u03D2\",\n    Upsilon: \"\\u03A5\",\n    upsilon: \"\\u03C5\",\n    Uuml: \"\\u00DC\",\n    uuml: \"\\u00FC\",\n    weierp: \"\\u2118\",\n    Xi: \"\\u039E\",\n    xi: \"\\u03BE\",\n    Yacute: \"\\u00DD\",\n    yacute: \"\\u00FD\",\n    yen: \"\\u00A5\",\n    yuml: \"\\u00FF\",\n    Yuml: \"\\u0178\",\n    Zeta: \"\\u0396\",\n    zeta: \"\\u03B6\",\n    zwj: \"\\u200D\",\n    zwnj: \"\\u200C\"\n};\n// The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\nvar /** @type {?} */ NGSP_UNICODE = \"\\uE500\";\nNAMED_ENTITIES[\"ngsp\"] = NGSP_UNICODE;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar TokenType = /*@__PURE__*/ (function () {\n    var TokenType = {\n        TAG_OPEN_START: 0,\n        TAG_OPEN_END: 1,\n        TAG_OPEN_END_VOID: 2,\n        TAG_CLOSE: 3,\n        TEXT: 4,\n        ESCAPABLE_RAW_TEXT: 5,\n        RAW_TEXT: 6,\n        COMMENT_START: 7,\n        COMMENT_END: 8,\n        CDATA_START: 9,\n        CDATA_END: 10,\n        ATTR_NAME: 11,\n        ATTR_VALUE: 12,\n        DOC_TYPE: 13,\n        EXPANSION_FORM_START: 14,\n        EXPANSION_CASE_VALUE: 15,\n        EXPANSION_CASE_EXP_START: 16,\n        EXPANSION_CASE_EXP_END: 17,\n        EXPANSION_FORM_END: 18,\n        EOF: 19,\n    };\n    TokenType[TokenType.TAG_OPEN_START] = \"TAG_OPEN_START\";\n    TokenType[TokenType.TAG_OPEN_END] = \"TAG_OPEN_END\";\n    TokenType[TokenType.TAG_OPEN_END_VOID] = \"TAG_OPEN_END_VOID\";\n    TokenType[TokenType.TAG_CLOSE] = \"TAG_CLOSE\";\n    TokenType[TokenType.TEXT] = \"TEXT\";\n    TokenType[TokenType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\n    TokenType[TokenType.RAW_TEXT] = \"RAW_TEXT\";\n    TokenType[TokenType.COMMENT_START] = \"COMMENT_START\";\n    TokenType[TokenType.COMMENT_END] = \"COMMENT_END\";\n    TokenType[TokenType.CDATA_START] = \"CDATA_START\";\n    TokenType[TokenType.CDATA_END] = \"CDATA_END\";\n    TokenType[TokenType.ATTR_NAME] = \"ATTR_NAME\";\n    TokenType[TokenType.ATTR_VALUE] = \"ATTR_VALUE\";\n    TokenType[TokenType.DOC_TYPE] = \"DOC_TYPE\";\n    TokenType[TokenType.EXPANSION_FORM_START] = \"EXPANSION_FORM_START\";\n    TokenType[TokenType.EXPANSION_CASE_VALUE] = \"EXPANSION_CASE_VALUE\";\n    TokenType[TokenType.EXPANSION_CASE_EXP_START] = \"EXPANSION_CASE_EXP_START\";\n    TokenType[TokenType.EXPANSION_CASE_EXP_END] = \"EXPANSION_CASE_EXP_END\";\n    TokenType[TokenType.EXPANSION_FORM_END] = \"EXPANSION_FORM_END\";\n    TokenType[TokenType.EOF] = \"EOF\";\n    return TokenType;\n}());\nvar Token = /*@__PURE__*/ (function () {\n    function Token(type, parts, sourceSpan) {\n        this.type = type;\n        this.parts = parts;\n        this.sourceSpan = sourceSpan;\n    }\n    return Token;\n}());\nvar TokenError = /*@__PURE__*/ (function (_super) {\n    __extends(TokenError, _super);\n    function TokenError(errorMsg, tokenType, span) {\n        var _this = _super.call(this, span, errorMsg) || this;\n        _this.tokenType = tokenType;\n        return _this;\n    }\n    return TokenError;\n}(ParseError));\nvar TokenizeResult = /*@__PURE__*/ (function () {\n    function TokenizeResult(tokens, errors) {\n        this.tokens = tokens;\n        this.errors = errors;\n    }\n    return TokenizeResult;\n}());\n/**\n * @param {?} source\n * @param {?} url\n * @param {?} getTagDefinition\n * @param {?=} tokenizeExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nfunction tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {\n    if (tokenizeExpansionForms === void 0) {\n        tokenizeExpansionForms = false;\n    }\n    if (interpolationConfig === void 0) {\n        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n    }\n    return new Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();\n}\nvar /** @type {?} */ _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n/**\n * @param {?} charCode\n * @return {?}\n */\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    var /** @type {?} */ char = charCode === $EOF ? \"EOF\" : String.fromCharCode(charCode);\n    return \"Unexpected character \\\"\" + char + \"\\\"\";\n}\n/**\n * @param {?} entitySrc\n * @return {?}\n */\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return \"Unknown entity \\\"\" + entitySrc + \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\";\n}\nvar ControlFlowError = /*@__PURE__*/ (function () {\n    function ControlFlowError(error) {\n        this.error = error;\n    }\n    return ControlFlowError;\n}());\nvar Tokenizer = /*@__PURE__*/ (function () {\n    /**\n     * @param _file The html source\n     * @param _getTagDefinition\n     * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n     * @param _interpolationConfig\n     */\n    function Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {\n        if (_interpolationConfig === void 0) {\n            _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n        }\n        this._file = _file;\n        this._getTagDefinition = _getTagDefinition;\n        this._tokenizeIcu = _tokenizeIcu;\n        this._interpolationConfig = _interpolationConfig;\n        this._peek = -1;\n        this._nextPeek = -1;\n        this._index = -1;\n        this._line = 0;\n        this._column = -1;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this._input = _file.content;\n        this._length = _file.content.length;\n        this._advance();\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    Tokenizer.prototype._processCarriageReturns = /**\n     * @param {?} content\n     * @return {?}\n     */\n        function (content) {\n            // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n            // In order to keep the original position in the source, we can not\n            // pre-process it.\n            // Instead CRs are processed right before instantiating the tokens.\n            return content.replace(_CR_OR_CRLF_REGEXP, \"\\n\");\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype.tokenize = /**\n     * @return {?}\n     */\n        function () {\n            while (this._peek !== $EOF) {\n                var /** @type {?} */ start = this._getLocation();\n                try {\n                    if (this._attemptCharCode($LT)) {\n                        if (this._attemptCharCode($BANG)) {\n                            if (this._attemptCharCode($LBRACKET)) {\n                                this._consumeCdata(start);\n                            }\n                            else if (this._attemptCharCode($MINUS)) {\n                                this._consumeComment(start);\n                            }\n                            else {\n                                this._consumeDocType(start);\n                            }\n                        }\n                        else if (this._attemptCharCode($SLASH)) {\n                            this._consumeTagClose(start);\n                        }\n                        else {\n                            this._consumeTagOpen(start);\n                        }\n                    }\n                    else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                        this._consumeText();\n                    }\n                }\n                catch (e) {\n                    if (e instanceof ControlFlowError) {\n                        this.errors.push(e.error);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            this._beginToken(TokenType.EOF);\n            this._endToken([]);\n            return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n        };\n    /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n    Tokenizer.prototype._tokenizeExpansionForm = /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n        function () {\n            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                this._consumeExpansionFormStart();\n                return true;\n            }\n            if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n                this._consumeExpansionCaseStart();\n                return true;\n            }\n            if (this._peek === $RBRACE) {\n                if (this._isInExpansionCase()) {\n                    this._consumeExpansionCaseEnd();\n                    return true;\n                }\n                if (this._isInExpansionForm()) {\n                    this._consumeExpansionFormEnd();\n                    return true;\n                }\n            }\n            return false;\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._getLocation = /**\n     * @return {?}\n     */\n        function () {\n            return new ParseLocation(this._file, this._index, this._line, this._column);\n        };\n    /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n    Tokenizer.prototype._getSpan = /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n        function (start, end) {\n            if (start === void 0) {\n                start = this._getLocation();\n            }\n            if (end === void 0) {\n                end = this._getLocation();\n            }\n            return new ParseSourceSpan(start, end);\n        };\n    /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n    Tokenizer.prototype._beginToken = /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n        function (type, start) {\n            if (start === void 0) {\n                start = this._getLocation();\n            }\n            this._currentTokenStart = start;\n            this._currentTokenType = type;\n        };\n    /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n    Tokenizer.prototype._endToken = /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n        function (parts, end) {\n            if (end === void 0) {\n                end = this._getLocation();\n            }\n            var /** @type {?} */ token = new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n            this.tokens.push(token);\n            this._currentTokenStart = /** @type {?} */ ((null));\n            this._currentTokenType = /** @type {?} */ ((null));\n            return token;\n        };\n    /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n    Tokenizer.prototype._createError = /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n        function (msg, span) {\n            if (this._isInExpansionForm()) {\n                msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n            }\n            var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);\n            this._currentTokenStart = /** @type {?} */ ((null));\n            this._currentTokenType = /** @type {?} */ ((null));\n            return new ControlFlowError(error);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._advance = /**\n     * @return {?}\n     */\n        function () {\n            if (this._index >= this._length) {\n                throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());\n            }\n            if (this._peek === $LF) {\n                this._line++;\n                this._column = 0;\n            }\n            else if (this._peek !== $LF && this._peek !== $CR) {\n                this._column++;\n            }\n            this._index++;\n            this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);\n            this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);\n        };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n        function (charCode) {\n            if (this._peek === charCode) {\n                this._advance();\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptCharCodeCaseInsensitive = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n        function (charCode) {\n            if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    Tokenizer.prototype._requireCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n        function (charCode) {\n            var /** @type {?} */ location = this._getLocation();\n            if (!this._attemptCharCode(charCode)) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n            }\n        };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n        function (chars) {\n            var /** @type {?} */ len = chars.length;\n            if (this._index + len > this._length) {\n                return false;\n            }\n            var /** @type {?} */ initialPosition = this._savePosition();\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                    // If attempting to parse the string fails, we want to reset the parser\n                    // to where it was before the attempt\n                    this._restorePosition(initialPosition);\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptStrCaseInsensitive = /**\n     * @param {?} chars\n     * @return {?}\n     */\n        function (chars) {\n            for (var /** @type {?} */ i = 0; i < chars.length; i++) {\n                if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    Tokenizer.prototype._requireStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n        function (chars) {\n            var /** @type {?} */ location = this._getLocation();\n            if (!this._attemptStr(chars)) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n            }\n        };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n        function (predicate) {\n            while (!predicate(this._peek)) {\n                this._advance();\n            }\n        };\n    /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n    Tokenizer.prototype._requireCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n        function (predicate, len) {\n            var /** @type {?} */ start = this._getLocation();\n            this._attemptCharCodeUntilFn(predicate);\n            if (this._index - start.offset < len) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n            }\n        };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    Tokenizer.prototype._attemptUntilChar = /**\n     * @param {?} char\n     * @return {?}\n     */\n        function (char) {\n            while (this._peek !== char) {\n                this._advance();\n            }\n        };\n    /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    Tokenizer.prototype._readChar = /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n        function (decodeEntities) {\n            if (decodeEntities && this._peek === $AMPERSAND) {\n                return this._decodeEntity();\n            }\n            else {\n                var /** @type {?} */ index = this._index;\n                this._advance();\n                return this._input[index];\n            }\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._decodeEntity = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this._getLocation();\n            this._advance();\n            if (this._attemptCharCode($HASH)) {\n                var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n                var /** @type {?} */ numberStart = this._getLocation().offset;\n                this._attemptCharCodeUntilFn(isDigitEntityEnd);\n                if (this._peek !== $SEMICOLON) {\n                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n                }\n                this._advance();\n                var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);\n                try {\n                    var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);\n                    return String.fromCharCode(charCode);\n                }\n                catch (e) {\n                    var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);\n                    throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n                }\n            }\n            else {\n                var /** @type {?} */ startPosition = this._savePosition();\n                this._attemptCharCodeUntilFn(isNamedEntityEnd);\n                if (this._peek !== $SEMICOLON) {\n                    this._restorePosition(startPosition);\n                    return \"&\";\n                }\n                this._advance();\n                var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);\n                var /** @type {?} */ char = NAMED_ENTITIES[name_1];\n                if (!char) {\n                    throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));\n                }\n                return char;\n            }\n        };\n    /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeRawText = /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n        function (decodeEntities, firstCharOfEnd, attemptEndRest) {\n            var /** @type {?} */ tagCloseStart;\n            var /** @type {?} */ textStart = this._getLocation();\n            this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);\n            var /** @type {?} */ parts = [];\n            while (true) {\n                tagCloseStart = this._getLocation();\n                if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n                    break;\n                }\n                if (this._index > tagCloseStart.offset) {\n                    // add the characters consumed by the previous if statement to the output\n                    parts.push(this._input.substring(tagCloseStart.offset, this._index));\n                }\n                while (this._peek !== firstCharOfEnd) {\n                    parts.push(this._readChar(decodeEntities));\n                }\n            }\n            return this._endToken([this._processCarriageReturns(parts.join(\"\"))], tagCloseStart);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeComment = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            var _this = this;\n            this._beginToken(TokenType.COMMENT_START, start);\n            this._requireCharCode($MINUS);\n            this._endToken([]);\n            var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr(\"->\"); });\n            this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);\n            this._endToken([]);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeCdata = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            var _this = this;\n            this._beginToken(TokenType.CDATA_START, start);\n            this._requireStr(\"CDATA[\");\n            this._endToken([]);\n            var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(\"]>\"); });\n            this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);\n            this._endToken([]);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeDocType = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            this._beginToken(TokenType.DOC_TYPE, start);\n            this._attemptUntilChar($GT);\n            this._advance();\n            this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumePrefixAndName = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ nameOrPrefixStart = this._index;\n            var /** @type {?} */ prefix = ((null));\n            while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {\n                this._advance();\n            }\n            var /** @type {?} */ nameStart;\n            if (this._peek === $COLON) {\n                this._advance();\n                prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n                nameStart = this._index;\n            }\n            else {\n                nameStart = nameOrPrefixStart;\n            }\n            this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n            var /** @type {?} */ name = this._input.substring(nameStart, this._index);\n            return [prefix, name];\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeTagOpen = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            var /** @type {?} */ savedPos = this._savePosition();\n            var /** @type {?} */ tagName;\n            var /** @type {?} */ lowercaseTagName;\n            try {\n                if (!isAsciiLetter(this._peek)) {\n                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n                }\n                var /** @type {?} */ nameStart = this._index;\n                this._consumeTagOpenStart(start);\n                tagName = this._input.substring(nameStart, this._index);\n                lowercaseTagName = tagName.toLowerCase();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                while (this._peek !== $SLASH && this._peek !== $GT) {\n                    this._consumeAttributeName();\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    if (this._attemptCharCode($EQ)) {\n                        this._attemptCharCodeUntilFn(isNotWhitespace);\n                        this._consumeAttributeValue();\n                    }\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                }\n                this._consumeTagOpenEnd();\n            }\n            catch (e) {\n                if (e instanceof ControlFlowError) {\n                    // When the start tag is invalid, assume we want a \"<\"\n                    this._restorePosition(savedPos);\n                    // Back to back text tokens are merged at the end\n                    this._beginToken(TokenType.TEXT, start);\n                    this._endToken([\"<\"]);\n                    return;\n                }\n                throw e;\n            }\n            var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;\n            if (contentTokenType === TagContentType.RAW_TEXT) {\n                this._consumeRawTextWithTagClose(lowercaseTagName, false);\n            }\n            else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n                this._consumeRawTextWithTagClose(lowercaseTagName, true);\n            }\n        };\n    /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeRawTextWithTagClose = /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n        function (lowercaseTagName, decodeEntities) {\n            var _this = this;\n            var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {\n                if (!_this._attemptCharCode($SLASH))\n                    return false;\n                _this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (!_this._attemptStrCaseInsensitive(lowercaseTagName))\n                    return false;\n                _this._attemptCharCodeUntilFn(isNotWhitespace);\n                return _this._attemptCharCode($GT);\n            });\n            this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);\n            this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeTagOpenStart = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            this._beginToken(TokenType.TAG_OPEN_START, start);\n            var /** @type {?} */ parts = this._consumePrefixAndName();\n            this._endToken(parts);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeAttributeName = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.ATTR_NAME);\n            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n            this._endToken(prefixAndName);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeAttributeValue = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.ATTR_VALUE);\n            var /** @type {?} */ value;\n            if (this._peek === $SQ || this._peek === $DQ) {\n                var /** @type {?} */ quoteChar = this._peek;\n                this._advance();\n                var /** @type {?} */ parts = [];\n                while (this._peek !== quoteChar) {\n                    parts.push(this._readChar(true));\n                }\n                value = parts.join(\"\");\n                this._advance();\n            }\n            else {\n                var /** @type {?} */ valueStart = this._index;\n                this._requireCharCodeUntilFn(isNameEnd, 1);\n                value = this._input.substring(valueStart, this._index);\n            }\n            this._endToken([this._processCarriageReturns(value)]);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeTagOpenEnd = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n            this._beginToken(tokenType);\n            this._requireCharCode($GT);\n            this._endToken([]);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeTagClose = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            this._beginToken(TokenType.TAG_CLOSE, start);\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            this._requireCharCode($GT);\n            this._endToken(prefixAndName);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeExpansionFormStart = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());\n            this._requireCharCode($LBRACE);\n            this._endToken([]);\n            this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n            this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n            var /** @type {?} */ condition = this._readUntil($COMMA);\n            this._endToken([condition], this._getLocation());\n            this._requireCharCode($COMMA);\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n            var /** @type {?} */ type = this._readUntil($COMMA);\n            this._endToken([type], this._getLocation());\n            this._requireCharCode($COMMA);\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeExpansionCaseStart = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());\n            var /** @type {?} */ value = this._readUntil($LBRACE).trim();\n            this._endToken([value], this._getLocation());\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n            this._requireCharCode($LBRACE);\n            this._endToken([], this._getLocation());\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeExpansionCaseEnd = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n            this._requireCharCode($RBRACE);\n            this._endToken([], this._getLocation());\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            this._expansionCaseStack.pop();\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeExpansionFormEnd = /**\n     * @return {?}\n     */\n        function () {\n            this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());\n            this._requireCharCode($RBRACE);\n            this._endToken([]);\n            this._expansionCaseStack.pop();\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._consumeText = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this._getLocation();\n            this._beginToken(TokenType.TEXT, start);\n            var /** @type {?} */ parts = [];\n            do {\n                if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                    parts.push(this._interpolationConfig.start);\n                    this._inInterpolation = true;\n                }\n                else if (this._interpolationConfig &&\n                    this._inInterpolation &&\n                    this._attemptStr(this._interpolationConfig.end)) {\n                    parts.push(this._interpolationConfig.end);\n                    this._inInterpolation = false;\n                }\n                else {\n                    parts.push(this._readChar(true));\n                }\n            } while (!this._isTextEnd());\n            this._endToken([this._processCarriageReturns(parts.join(\"\"))]);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._isTextEnd = /**\n     * @return {?}\n     */\n        function () {\n            if (this._peek === $LT || this._peek === $EOF) {\n                return true;\n            }\n            if (this._tokenizeIcu && !this._inInterpolation) {\n                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                    // start of an expansion form\n                    return true;\n                }\n                if (this._peek === $RBRACE && this._isInExpansionCase()) {\n                    // end of and expansion case\n                    return true;\n                }\n            }\n            return false;\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._savePosition = /**\n     * @return {?}\n     */\n        function () {\n            return [this._peek, this._index, this._column, this._line, this.tokens.length];\n        };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    Tokenizer.prototype._readUntil = /**\n     * @param {?} char\n     * @return {?}\n     */\n        function (char) {\n            var /** @type {?} */ start = this._index;\n            this._attemptUntilChar(char);\n            return this._input.substring(start, this._index);\n        };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    Tokenizer.prototype._restorePosition = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            this._peek = position[0];\n            this._index = position[1];\n            this._column = position[2];\n            this._line = position[3];\n            var /** @type {?} */ nbTokens = position[4];\n            if (nbTokens < this.tokens.length) {\n                // remove any extra tokens\n                this.tokens = this.tokens.slice(0, nbTokens);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._isInExpansionCase = /**\n     * @return {?}\n     */\n        function () {\n            return (this._expansionCaseStack.length > 0 &&\n                this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_CASE_EXP_START);\n        };\n    /**\n     * @return {?}\n     */\n    Tokenizer.prototype._isInExpansionForm = /**\n     * @return {?}\n     */\n        function () {\n            return (this._expansionCaseStack.length > 0 &&\n                this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_FORM_START);\n        };\n    return Tokenizer;\n}());\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNotWhitespace(code) {\n    return !isWhitespace(code) || code === $EOF;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNameEnd(code) {\n    return (isWhitespace(code) ||\n        code === $GT ||\n        code === $SLASH ||\n        code === $SQ ||\n        code === $DQ ||\n        code === $EQ);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isPrefixEnd(code) {\n    return ((code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9));\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigitEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNamedEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\n/**\n * @param {?} input\n * @param {?} offset\n * @param {?} interpolationConfig\n * @return {?}\n */\nfunction isExpansionFormStart(input, offset, interpolationConfig) {\n    var /** @type {?} */ isInterpolationStart = interpolationConfig\n        ? input.indexOf(interpolationConfig.start, offset) === offset\n        : false;\n    return input.charCodeAt(offset) === $LBRACE && !isInterpolationStart;\n}\n/**\n * @param {?} peek\n * @return {?}\n */\nfunction isExpansionCaseStart(peek) {\n    return peek === $EQ || isAsciiLetter(peek) || isDigit(peek);\n}\n/**\n * @param {?} code1\n * @param {?} code2\n * @return {?}\n */\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction toUpperCaseCharCode(code) {\n    return code >= $a && code <= $z ? code - $a + $A : code;\n}\n/**\n * @param {?} srcTokens\n * @return {?}\n */\nfunction mergeTextTokens(srcTokens) {\n    var /** @type {?} */ dstTokens = [];\n    var /** @type {?} */ lastDstToken = undefined;\n    for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {\n        var /** @type {?} */ token = srcTokens[i];\n        if (lastDstToken && lastDstToken.type === TokenType.TEXT && token.type === TokenType.TEXT) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TreeError = /*@__PURE__*/ (function (_super) {\n    __extends(TreeError, _super);\n    function TreeError(elementName, span, msg) {\n        var _this = _super.call(this, span, msg) || this;\n        _this.elementName = elementName;\n        return _this;\n    }\n    /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n    TreeError.create = /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n        function (elementName, span, msg) {\n            return new TreeError(elementName, span, msg);\n        };\n    return TreeError;\n}(ParseError));\nvar ParseTreeResult = /*@__PURE__*/ (function () {\n    function ParseTreeResult(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n    return ParseTreeResult;\n}());\nvar Parser = /*@__PURE__*/ (function () {\n    function Parser(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (source, url, parseExpansionForms, interpolationConfig) {\n            if (parseExpansionForms === void 0) {\n                parseExpansionForms = false;\n            }\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n            var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n            return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));\n        };\n    return Parser;\n}());\nvar _TreeBuilder = /*@__PURE__*/ (function () {\n    function _TreeBuilder(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._rootNodes = [];\n        this._errors = [];\n        this._elementStack = [];\n        this._advance();\n    }\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype.build = /**\n     * @return {?}\n     */\n        function () {\n            while (this._peek.type !== TokenType.EOF) {\n                if (this._peek.type === TokenType.TAG_OPEN_START) {\n                    this._consumeStartTag(this._advance());\n                }\n                else if (this._peek.type === TokenType.TAG_CLOSE) {\n                    this._consumeEndTag(this._advance());\n                }\n                else if (this._peek.type === TokenType.CDATA_START) {\n                    this._closeVoidElement();\n                    this._consumeCdata(this._advance());\n                }\n                else if (this._peek.type === TokenType.COMMENT_START) {\n                    this._closeVoidElement();\n                    this._consumeComment(this._advance());\n                }\n                else if (this._peek.type === TokenType.TEXT ||\n                    this._peek.type === TokenType.RAW_TEXT ||\n                    this._peek.type === TokenType.ESCAPABLE_RAW_TEXT) {\n                    this._closeVoidElement();\n                    this._consumeText(this._advance());\n                }\n                else if (this._peek.type === TokenType.EXPANSION_FORM_START) {\n                    this._consumeExpansion(this._advance());\n                }\n                else {\n                    // Skip all other tokens...\n                    this._advance();\n                }\n            }\n            return new ParseTreeResult(this._rootNodes, this._errors);\n        };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advance = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ prev = this._peek;\n            if (this._index < this.tokens.length - 1) {\n                // Note: there is always an EOF token at the end\n                this._index++;\n            }\n            this._peek = this.tokens[this._index];\n            return prev;\n        };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advanceIf = /**\n     * @param {?} type\n     * @return {?}\n     */\n        function (type) {\n            if (this._peek.type === type) {\n                return this._advance();\n            }\n            return null;\n        };\n    /**\n     * @param {?} startToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeCdata = /**\n     * @param {?} startToken\n     * @return {?}\n     */\n        function (startToken) {\n            this._consumeText(this._advance());\n            this._advanceIf(TokenType.CDATA_END);\n        };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeComment = /**\n     * @param {?} token\n     * @return {?}\n     */\n        function (token) {\n            var /** @type {?} */ text = this._advanceIf(TokenType.RAW_TEXT);\n            this._advanceIf(TokenType.COMMENT_END);\n            var /** @type {?} */ value = text !== null ? text.parts[0].trim() : null;\n            this._addToParent(new Comment(value, token.sourceSpan));\n        };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeExpansion = /**\n     * @param {?} token\n     * @return {?}\n     */\n        function (token) {\n            var /** @type {?} */ switchValue = this._advance();\n            var /** @type {?} */ type = this._advance();\n            var /** @type {?} */ cases = [];\n            // read =\n            while (this._peek.type === TokenType.EXPANSION_CASE_VALUE) {\n                var /** @type {?} */ expCase = this._parseExpansionCase();\n                if (!expCase) {\n                    return;\n                } // error\n                cases.push(expCase);\n            }\n            // read the final }\n            if (this._peek.type !== TokenType.EXPANSION_FORM_END) {\n                this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                return;\n            }\n            var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n            this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n            this._advance();\n        };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._parseExpansionCase = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ value = this._advance();\n            // read {\n            if (this._peek.type !== TokenType.EXPANSION_CASE_EXP_START) {\n                this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n                return null;\n            }\n            // read until }\n            var /** @type {?} */ start = this._advance();\n            var /** @type {?} */ exp = this._collectExpansionExpTokens(start);\n            if (!exp) {\n                return null;\n            }\n            var /** @type {?} */ end = this._advance();\n            exp.push(new Token(TokenType.EOF, [], end.sourceSpan));\n            // parse everything in between { and }\n            var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n            if (parsedExp.errors.length > 0) {\n                this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));\n                return null;\n            }\n            var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n            var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n            return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _TreeBuilder.prototype._collectExpansionExpTokens = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            var /** @type {?} */ exp = [];\n            var /** @type {?} */ expansionFormStack = [TokenType.EXPANSION_CASE_EXP_START];\n            while (true) {\n                if (this._peek.type === TokenType.EXPANSION_FORM_START ||\n                    this._peek.type === TokenType.EXPANSION_CASE_EXP_START) {\n                    expansionFormStack.push(this._peek.type);\n                }\n                if (this._peek.type === TokenType.EXPANSION_CASE_EXP_END) {\n                    if (lastOnStack(expansionFormStack, TokenType.EXPANSION_CASE_EXP_START)) {\n                        expansionFormStack.pop();\n                        if (expansionFormStack.length === 0) {\n                            return exp;\n                        }\n                    }\n                    else {\n                        this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                        return null;\n                    }\n                }\n                if (this._peek.type === TokenType.EXPANSION_FORM_END) {\n                    if (lastOnStack(expansionFormStack, TokenType.EXPANSION_FORM_START)) {\n                        expansionFormStack.pop();\n                    }\n                    else {\n                        this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                        return null;\n                    }\n                }\n                if (this._peek.type === TokenType.EOF) {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                    return null;\n                }\n                exp.push(this._advance());\n            }\n        };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeText = /**\n     * @param {?} token\n     * @return {?}\n     */\n        function (token) {\n            var /** @type {?} */ text = token.parts[0];\n            if (text.length > 0 && text[0] === \"\\n\") {\n                var /** @type {?} */ parent_1 = this._getParentElement();\n                if (parent_1 !== null && parent_1.children.length === 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n                    text = text.substring(1);\n                }\n            }\n            if (text.length > 0) {\n                this._addToParent(new Text(text, token.sourceSpan));\n            }\n        };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._closeVoidElement = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ el = this._getParentElement();\n            if (el && this.getTagDefinition(el.name).isVoid) {\n                this._elementStack.pop();\n            }\n        };\n    /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeStartTag = /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n        function (startTagToken) {\n            var /** @type {?} */ prefix = startTagToken.parts[0];\n            var /** @type {?} */ name = startTagToken.parts[1];\n            var /** @type {?} */ attrs = [];\n            while (this._peek.type === TokenType.ATTR_NAME) {\n                attrs.push(this._consumeAttr(this._advance()));\n            }\n            var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());\n            var /** @type {?} */ selfClosing = false;\n            // Note: There could have been a tokenizer error\n            // so that we don't get a token for the end tag...\n            if (this._peek.type === TokenType.TAG_OPEN_END_VOID) {\n                this._advance();\n                selfClosing = true;\n                var /** @type {?} */ tagDef = this.getTagDefinition(fullName);\n                if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                    this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n                }\n            }\n            else if (this._peek.type === TokenType.TAG_OPEN_END) {\n                this._advance();\n                selfClosing = false;\n            }\n            var /** @type {?} */ end = this._peek.sourceSpan.start;\n            var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n            var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, undefined);\n            this._pushElement(el);\n            if (selfClosing) {\n                this._popElement(fullName);\n                el.endSourceSpan = span;\n            }\n        };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _TreeBuilder.prototype._pushElement = /**\n     * @param {?} el\n     * @return {?}\n     */\n        function (el) {\n            var /** @type {?} */ parentEl = this._getParentElement();\n            if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n                this._elementStack.pop();\n            }\n            var /** @type {?} */ tagDef = this.getTagDefinition(el.name);\n            var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;\n            if (parent && tagDef.requireExtraParent(parent.name)) {\n                var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n                this._insertBeforeContainer(parent, container, newParent);\n            }\n            this._addToParent(el);\n            this._elementStack.push(el);\n        };\n    /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeEndTag = /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n        function (endTagToken) {\n            var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n            if (this._getParentElement()) {\n                /** @type {?} */ ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;\n            }\n            if (this.getTagDefinition(fullName).isVoid) {\n                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n            }\n            else if (!this._popElement(fullName)) {\n                var /** @type {?} */ errMsg = \"Unexpected closing tag \\\"\" + fullName + \"\\\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags\";\n                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n            }\n        };\n    /**\n     * @param {?} fullName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._popElement = /**\n     * @param {?} fullName\n     * @return {?}\n     */\n        function (fullName) {\n            for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n                var /** @type {?} */ el = this._elementStack[stackIndex];\n                if (el.name === fullName) {\n                    this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                    return true;\n                }\n                if (!this.getTagDefinition(el.name).closedByParent) {\n                    return false;\n                }\n            }\n            return false;\n        };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeAttr = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n        function (attrName) {\n            var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n            var /** @type {?} */ end = attrName.sourceSpan.end;\n            var /** @type {?} */ value = \"\";\n            var /** @type {?} */ valueSpan = ((undefined));\n            if (this._peek.type === TokenType.ATTR_VALUE) {\n                var /** @type {?} */ valueToken = this._advance();\n                value = valueToken.parts[0];\n                end = valueToken.sourceSpan.end;\n                valueSpan = valueToken.sourceSpan;\n            }\n            return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n        };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElement = /**\n     * @return {?}\n     */\n        function () {\n            return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n        };\n    /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElementSkippingContainers = /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ container = null;\n            for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {\n                if (!isNgContainer(this._elementStack[i].name)) {\n                    return { parent: this._elementStack[i], container: container };\n                }\n                container = this._elementStack[i];\n            }\n            return { parent: null, container: container };\n        };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._addToParent = /**\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            var /** @type {?} */ parent = this._getParentElement();\n            if (parent !== null) {\n                parent.children.push(node);\n            }\n            else {\n                this._rootNodes.push(node);\n            }\n        };\n    /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._insertBeforeContainer = /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n        function (parent, container, node) {\n            if (!container) {\n                this._addToParent(node);\n                this._elementStack.push(node);\n            }\n            else {\n                if (parent) {\n                    // replace the container with the new node in the children\n                    var /** @type {?} */ index = parent.children.indexOf(container);\n                    parent.children[index] = node;\n                }\n                else {\n                    this._rootNodes.push(node);\n                }\n                node.children.push(container);\n                this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n            }\n        };\n    /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getElementFullName = /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n        function (prefix, localName, parentElement) {\n            if (prefix === null) {\n                prefix = /** @type {?} */ ((this.getTagDefinition(localName).implicitNamespacePrefix));\n                if (prefix === null && parentElement !== null) {\n                    prefix = getNsPrefix(parentElement.name);\n                }\n            }\n            return mergeNsAndName(prefix, localName);\n        };\n    return _TreeBuilder;\n}());\n/**\n * @param {?} stack\n * @param {?} element\n * @return {?}\n */\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar XmlTagDefinition = /*@__PURE__*/ (function () {\n    function XmlTagDefinition() {\n        this.closedByParent = false;\n        this.contentType = TagContentType.PARSABLE_DATA;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n        function (currentParent) {\n            return false;\n        };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n            return false;\n        };\n    return XmlTagDefinition;\n}());\nvar /** @type {?} */ _TAG_DEFINITION = /*@__PURE__*/ new XmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nfunction getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar HtmlTagDefinition = /*@__PURE__*/ (function () {\n    function HtmlTagDefinition(_a) {\n        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;\n        var _this = this;\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        this.canSelfClose = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        if (requiredParents && requiredParents.length > 0) {\n            this.requiredParents = {};\n            // The first parent is the list is automatically when none of the listed parents are present\n            this.parentToAdd = requiredParents[0];\n            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });\n        }\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n        function (currentParent) {\n            if (!this.requiredParents) {\n                return false;\n            }\n            if (!currentParent) {\n                return true;\n            }\n            var /** @type {?} */ lcParent = currentParent.toLowerCase();\n            var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\n            return !isParentTemplate && this.requiredParents[lcParent] !== true;\n        };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n            return this.isVoid || name.toLowerCase() in this.closedByChildren;\n        };\n    return HtmlTagDefinition;\n}());\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nvar /** @type {?} */ TAG_DEFINITIONS = {\n    'base': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'meta': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'area': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'embed': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'link': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'img': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'input': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'param': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'hr': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'br': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'source': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'track': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'wbr': /*@__PURE__*/ new HtmlTagDefinition({ isVoid: true }),\n    'p': /*@__PURE__*/ new HtmlTagDefinition({\n        closedByChildren: [\n            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\n            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\n        ],\n        closedByParent: true\n    }),\n    'thead': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n    'tbody': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n    'tfoot': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n    'tr': /*@__PURE__*/ new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        requiredParents: ['tbody', 'tfoot', 'thead'],\n        closedByParent: true\n    }),\n    'td': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'th': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'col': /*@__PURE__*/ new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\n    'svg': /*@__PURE__*/ new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n    'math': /*@__PURE__*/ new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n    'li': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n    'dt': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n    'dd': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n    'rb': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rt': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rtc': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n    'rp': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'optgroup': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n    'option': /*@__PURE__*/ new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n    'pre': /*@__PURE__*/ new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'listing': /*@__PURE__*/ new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'style': /*@__PURE__*/ new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'script': /*@__PURE__*/ new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'title': /*@__PURE__*/ new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\n    'textarea': /*@__PURE__*/ new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n};\nvar /** @type {?} */ _DEFAULT_TAG_DEFINITION = /*@__PURE__*/ new HtmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nfunction getHtmlTagDefinition(tagName) {\n    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nvar /**\n * A simple mapper that take a function to transform an internal name to a public name\n */ SimplePlaceholderMapper = /*@__PURE__*/ (function (_super) {\n    __extends(SimplePlaceholderMapper, _super);\n    // create a mapping from the message\n    function SimplePlaceholderMapper(message, mapName) {\n        var _this = _super.call(this) || this;\n        _this.mapName = mapName;\n        _this.internalToPublic = {};\n        _this.publicToNextId = {};\n        _this.publicToInternal = {};\n        message.nodes.forEach(function (node) { return node.visit(_this); });\n        return _this;\n    }\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toPublicName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n        function (internalName) {\n            return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;\n        };\n    /**\n     * @param {?} publicName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toInternalName = /**\n     * @param {?} publicName\n     * @return {?}\n     */\n        function (publicName) {\n            return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;\n        };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n        function (text, context) {\n            return null;\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            this.visitPlaceholderName(ph.startName);\n            _super.prototype.visitTagPlaceholder.call(this, ph, context);\n            this.visitPlaceholderName(ph.closeName);\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            this.visitPlaceholderName(ph.name);\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            this.visitPlaceholderName(ph.name);\n        };\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholderName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n        function (internalName) {\n            if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n                return;\n            }\n            var /** @type {?} */ publicName = this.mapName(internalName);\n            if (this.publicToInternal.hasOwnProperty(publicName)) {\n                // Create a new XMB when it has already been used\n                var /** @type {?} */ nextId = this.publicToNextId[publicName];\n                this.publicToNextId[publicName] = nextId + 1;\n                publicName = publicName + \"_\" + nextId;\n            }\n            else {\n                this.publicToNextId[publicName] = 1;\n            }\n            this.internalToPublic[internalName] = publicName;\n            this.publicToInternal[publicName] = internalName;\n        };\n    return SimplePlaceholderMapper;\n}(RecurseVisitor));\nvar /** @type {?} */ i18nSelectPipe = /*@__PURE__*/ new I18nSelectPipe();\nvar SerializerVisitor = /*@__PURE__*/ (function () {\n    function SerializerVisitor(locale, params) {\n        this.params = params;\n        this.i18nPluralPipe = new I18nPluralPipe(new NgLocaleLocalization(locale));\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n        function (element, context) {\n            if (getHtmlTagDefinition(element.name).isVoid) {\n                return \"<\" + element.name + this.serializeNodes(element.attrs, \" \") + \"/>\";\n            }\n            return \"<\" + element.name + this.serializeNodes(element.attrs, \" \") + \">\" + this.serializeNodes(element.children) + \"</\" + element.name + \">\";\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) {\n            return attribute.name + \"=\\\"\" + attribute.value + \"\\\"\";\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return text.value;\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) {\n            return \"<!--\" + comment.value + \"-->\";\n        };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansion, context) {\n            var _this = this;\n            var /** @type {?} */ cases = {};\n            expansion.cases.forEach(function (c) { return (cases[c.value] = _this.serializeNodes(c.expression)); });\n            switch (expansion.type) {\n                case \"select\":\n                    return i18nSelectPipe.transform(this.params[expansion.switchValue] || \"\", cases);\n                case \"plural\":\n                    return this.i18nPluralPipe.transform(this.params[expansion.switchValue], cases);\n            }\n            throw new Error(\"Unknown expansion type \\\"\" + expansion.type + \"\\\"\");\n        };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansionCase, context) {\n            return \" \" + expansionCase.value + \" {\" + this.serializeNodes(expansionCase.expression) + \"}\";\n        };\n    /**\n     * @param {?} nodes\n     * @param {?=} join\n     * @return {?}\n     */\n    SerializerVisitor.prototype.serializeNodes = /**\n     * @param {?} nodes\n     * @param {?=} join\n     * @return {?}\n     */\n        function (nodes, join) {\n            var _this = this;\n            if (join === void 0) {\n                join = \"\";\n            }\n            if (nodes.length === 0) {\n                return \"\";\n            }\n            return join + nodes.map(function (a) { return a.visit(_this, null); }).join(join);\n        };\n    return SerializerVisitor;\n}());\n/**\n * @param {?} nodes\n * @param {?} locale\n * @param {?} params\n * @return {?}\n */\nfunction serializeNodes(nodes, locale, params) {\n    return nodes.map(function (node) { return node.visit(new SerializerVisitor(locale, params), null); });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} message\n * @return {?}\n */\nfunction digest(message) {\n    return message.id || sha1(serializeNodes$1(message.nodes).join(\"\") + (\"[\" + message.meaning + \"]\"));\n}\n/**\n * @param {?} message\n * @return {?}\n */\nfunction decimalDigest(message) {\n    if (message.id) {\n        return message.id;\n    }\n    var /** @type {?} */ visitor = new SerializerIgnoreIcuExpVisitor();\n    var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });\n    return computeMsgId(parts.join(\"\"), message.meaning);\n}\n/**\n * Serialize the i18n html to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n html to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */ SerializerVisitor$1 = /*@__PURE__*/ (function () {\n    function SerializerVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return text.value;\n        };\n    /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n        function (container, context) {\n            var _this = this;\n            return \"[\" + container.children.map(function (child) { return child.visit(_this); }).join(\", \") + \"]\";\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var _this = this;\n            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n            return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(\", \") + \"}\";\n        };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n        function (ph, context) {\n            var _this = this;\n            return ph.isVoid\n                ? \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\"\n                : \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) { return child.visit(_this); }).join(\", \") + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n        };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n        function (ph, context) {\n            return ph.value ? \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\" : \"<ph name=\\\"\" + ph.name + \"\\\"/>\";\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SerializerVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n        };\n    return SerializerVisitor;\n}());\nvar /** @type {?} */ serializerVisitor = /*@__PURE__*/ new SerializerVisitor$1();\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction serializeNodes$1(nodes) {\n    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });\n}\n/**\n * Serialize the i18n html to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n html to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */ SerializerIgnoreIcuExpVisitor = /*@__PURE__*/ (function (_super) {\n    __extends(SerializerIgnoreIcuExpVisitor, _super);\n    function SerializerIgnoreIcuExpVisitor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    SerializerIgnoreIcuExpVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var _this = this;\n            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n            // Do not take the expression into account\n            return \"{\" + icu.type + \", \" + strCases.join(\", \") + \"}\";\n        };\n    return SerializerIgnoreIcuExpVisitor;\n}(SerializerVisitor$1));\n/**\n * Compute the SHA1 of the given string\n *\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n * @param {?} str\n * @return {?}\n */\nfunction sha1(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\n    var /** @type {?} */ len = utf8.length * 8;\n    var /** @type {?} */ w = new Array(80);\n    var _a = __read([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], 5), a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[(((len + 64) >> 9) << 4) + 15] = len;\n    for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {\n        var _b = __read([a, b, c, d, e], 5), h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];\n        for (var /** @type {?} */ j = 0; j < 80; j++) {\n            /* tslint:disable-next-line */\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            var _c = __read(fk(j, b, c, d), 2), f = _c[0], k = _c[1];\n            var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            _d = __read([d, c, rol32(b, 30), a, temp], 5), e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];\n        }\n        _e = __read([add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], 5), a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];\n    }\n    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n    var _d, _e;\n}\n/**\n * @param {?} index\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n * @param {?} str\n * @return {?}\n */\nfunction fingerprint(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var _a = __read([hash32(utf8, 0), hash32(utf8, 102072)], 2), hi = _a[0], lo = _a[1];\n    if (hi === 0 && (lo === 0 || lo === 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return [hi, lo];\n}\n/**\n * @param {?} msg\n * @param {?} meaning\n * @return {?}\n */\nfunction computeMsgId(msg, meaning) {\n    var _a = __read(fingerprint(msg), 2), hi = _a[0], lo = _a[1];\n    if (meaning) {\n        var _b = __read(fingerprint(meaning), 2), him = _b[0], lom = _b[1];\n        _c = __read(add64(rol64([hi, lo], 1), [him, lom]), 2), hi = _c[0], lo = _c[1];\n    }\n    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n    var _c;\n}\n/**\n * @param {?} str\n * @param {?} c\n * @return {?}\n */\nfunction hash32(str, c) {\n    var _a = __read([0x9e3779b9, 0x9e3779b9], 2), a = _a[0], b = _a[1];\n    var /** @type {?} */ i;\n    var /** @type {?} */ len = str.length;\n    for (i = 0; i + 12 <= len; i += 12) {\n        a = add32(a, wordAt(str, i, Endian.Little));\n        b = add32(b, wordAt(str, i + 4, Endian.Little));\n        c = add32(c, wordAt(str, i + 8, Endian.Little));\n        _b = __read(mix([a, b, c]), 3), a = _b[0], b = _b[1], c = _b[2];\n    }\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    // the first byte of c is reserved for the length\n    c = add32(c, len);\n    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n    return mix([a, b, c])[2];\n    var _b;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction mix(_a) {\n    var _b = __read(_a, 3), a = _b[0], b = _b[1], c = _b[2];\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n/** @enum {number} */\nvar Endian = /*@__PURE__*/ (function () {\n    var Endian = {\n        Little: 0,\n        Big: 1,\n    };\n    Endian[Endian.Little] = \"Little\";\n    Endian[Endian.Big] = \"Big\";\n    return Endian;\n}());\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32to64(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\n    var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n/**\n * @param {?} __0\n * @param {?} __1\n * @return {?}\n */\nfunction add64(_a, _b) {\n    var _c = __read(_a, 2), ah = _c[0], al = _c[1];\n    var _d = __read(_b, 2), bh = _d[0], bl = _d[1];\n    var _e = __read(add32to64(al, bl), 2), carry = _e[0], l = _e[1];\n    var /** @type {?} */ h = add32(add32(ah, bh), carry);\n    return [h, l];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sub32(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\n    var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\n    return (high << 16) | (low & 0xffff);\n}\n/**\n * @param {?} a\n * @param {?} count\n * @return {?}\n */\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\n/**\n * @param {?} __0\n * @param {?} count\n * @return {?}\n */\nfunction rol64(_a, count) {\n    var _b = __read(_a, 2), hi = _b[0], lo = _b[1];\n    var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\n    var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\n    return [h, l];\n}\n/**\n * @param {?} str\n * @param {?} endian\n * @return {?}\n */\nfunction stringToWords32(str, endian) {\n    var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\n    for (var /** @type {?} */ i = 0; i < words32.length; i++) {\n        words32[i] = wordAt(str, i * 4, endian);\n    }\n    return words32;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction byteAt(str, index) {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @param {?} endian\n * @return {?}\n */\nfunction wordAt(str, index, endian) {\n    var /** @type {?} */ word = 0;\n    if (endian === Endian.Big) {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << (8 * i);\n        }\n    }\n    return word;\n}\n/**\n * @param {?} words32\n * @return {?}\n */\nfunction words32ToByteString(words32) {\n    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, \"\");\n}\n/**\n * @param {?} word\n * @return {?}\n */\nfunction word32ToByteString(word) {\n    var /** @type {?} */ str = \"\";\n    for (var /** @type {?} */ i = 0; i < 4; i++) {\n        str += String.fromCharCode((word >>> (8 * (3 - i))) & 0xff);\n    }\n    return str;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToHexString(str) {\n    var /** @type {?} */ hex = \"\";\n    for (var /** @type {?} */ i = 0; i < str.length; i++) {\n        var /** @type {?} */ b = byteAt(str, i);\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n    return hex.toLowerCase();\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToDecString(str) {\n    var /** @type {?} */ decimal = \"\";\n    var /** @type {?} */ toThePower = \"1\";\n    for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {\n        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n        toThePower = numberTimesBigInt(256, toThePower);\n    }\n    return decimal\n        .split(\"\")\n        .reverse()\n        .join(\"\");\n}\n/**\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction addBigInt(x, y) {\n    var /** @type {?} */ sum = \"\";\n    var /** @type {?} */ len = Math.max(x.length, y.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\n        var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n        if (tmpSum >= 10) {\n            carry = 1;\n            sum += tmpSum - 10;\n        }\n        else {\n            carry = 0;\n            sum += tmpSum;\n        }\n    }\n    return sum;\n}\n/**\n * @param {?} num\n * @param {?} b\n * @return {?}\n */\nfunction numberTimesBigInt(num, b) {\n    var /** @type {?} */ product = \"\";\n    var /** @type {?} */ bToThePower = b;\n    for (; num !== 0; num = num >>> 1) {\n        if (num & 1) {\n            product = addBigInt(product, bToThePower);\n        }\n        bToThePower = addBigInt(bToThePower, bToThePower);\n    }\n    return product;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction utf8Encode(str) {\n    var /** @type {?} */ encoded = \"\";\n    for (var /** @type {?} */ index = 0; index < str.length; index++) {\n        var /** @type {?} */ codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {\n            var /** @type {?} */ low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded += String.fromCharCode(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded += String.fromCharCode(((codePoint >> 6) & 0x1f) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _PLACEHOLDER_TAG = \"x\";\nvar /** @type {?} */ _FILE_TAG = \"file\";\nvar /** @type {?} */ _SOURCE_TAG = \"source\";\nvar /** @type {?} */ _TARGET_TAG = \"target\";\nvar /** @type {?} */ _UNIT_TAG = \"trans-unit\";\n/**\n * @param {?} content\n * @return {?}\n */\nfunction xliffLoadToI18n(content) {\n    // xliff to xml nodes\n    var /** @type {?} */ xliffParser = new XliffParser();\n    var _a = xliffParser.parse(content), msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n    // xml nodes to i18n messages\n    var /** @type {?} */ i18nMessagesById = {};\n    var /** @type {?} */ converter = new XmlToI18n();\n    Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;\n        errors.push.apply(errors, __spread(e));\n        i18nMessagesById[msgId] = i18nNodes;\n    });\n    if (errors.length) {\n        throw new Error(\"xliff parse errors:\\n\" + errors.join(\"\\n\"));\n    }\n    return i18nMessagesById;\n}\nvar /** @type {?} */ xliffDigest = digest;\nvar XliffParser = /*@__PURE__*/ (function () {\n    function XliffParser() {\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    XliffParser.prototype.parse = /**\n     * @param {?} content\n     * @return {?}\n     */\n        function (content) {\n            this._unitMlString = null;\n            this._msgIdToHtml = {};\n            var /** @type {?} */ parser = new Parser(getXmlTagDefinition).parse(content, \"\", false);\n            this._errors = parser.errors;\n            visitAll(this, parser.rootNodes, null);\n            return {\n                msgIdToHtml: this._msgIdToHtml,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n        function (element, context) {\n            switch (element.name) {\n                case _UNIT_TAG:\n                    this._unitMlString = /** @type {?} */ ((null));\n                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === \"id\"; });\n                    if (!idAttr) {\n                        this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                    }\n                    else {\n                        var /** @type {?} */ id = idAttr.value;\n                        if (this._msgIdToHtml.hasOwnProperty(id)) {\n                            this._addError(element, \"Duplicated translations for msg \" + id);\n                        }\n                        else {\n                            visitAll(this, element.children, null);\n                            if (typeof this._unitMlString === \"string\") {\n                                this._msgIdToHtml[id] = this._unitMlString;\n                            }\n                            else {\n                                this._addError(element, \"Message \" + id + \" misses a translation\");\n                            }\n                        }\n                    }\n                    break;\n                case _SOURCE_TAG:\n                    // ignore source message\n                    break;\n                case _TARGET_TAG:\n                    var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;\n                    var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;\n                    var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;\n                    var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                    this._unitMlString = innerText;\n                    break;\n                case _FILE_TAG:\n                    visitAll(this, element.children, null);\n                    break;\n                default:\n                    // TODO(vicb): assert file structure, xliff version\n                    // For now only recurse on unhandled nodes\n                    visitAll(this, element.children, null);\n            }\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XliffParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n        };\n    return XliffParser;\n}());\nvar XmlToI18n = /*@__PURE__*/ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n            var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, \"\", true);\n            this._errors = xmlIcu.errors;\n            var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : visitAll(this, xmlIcu.rootNodes);\n            return {\n                i18nNodes: i18nNodes,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan)));\n        };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n        function (el, context) {\n            if (el.name === _PLACEHOLDER_TAG) {\n                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === \"id\"; });\n                if (nameAttr) {\n                    return new Placeholder(\"\", nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n                }\n                this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n            }\n            else {\n                this._addError(el, \"Unexpected tag\");\n            }\n            return null;\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var /** @type {?} */ caseMap = {};\n            visitAll(this, icu.cases).forEach(function (c) {\n                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n            });\n            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n        };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (icuCase, context) {\n            return {\n                value: icuCase.value,\n                nodes: visitAll(this, icuCase.expression)\n            };\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n        };\n    return XmlToI18n;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _PLACEHOLDER_TAG$1 = \"ph\";\nvar /** @type {?} */ _PLACEHOLDER_SPANNING_TAG = \"pc\";\nvar /** @type {?} */ _XLIFF_TAG = \"xliff\";\nvar /** @type {?} */ _SOURCE_TAG$1 = \"source\";\nvar /** @type {?} */ _TARGET_TAG$1 = \"target\";\nvar /** @type {?} */ _UNIT_TAG$1 = \"unit\";\n/**\n * @param {?} content\n * @return {?}\n */\nfunction xliff2LoadToI18n(content) {\n    // xliff to xml nodes\n    var /** @type {?} */ xliff2Parser = new Xliff2Parser();\n    var _a = xliff2Parser.parse(content), msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n    // xml nodes to i18n nodes\n    var /** @type {?} */ i18nNodesByMsgId = {};\n    var /** @type {?} */ converter = new XmlToI18n$1();\n    Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;\n        errors.push.apply(errors, __spread(e));\n        i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n    if (errors.length) {\n        throw new Error(\"xliff2 parse errors:\\n\" + errors.join(\"\\n\"));\n    }\n    return i18nNodesByMsgId;\n}\nvar /** @type {?} */ xliff2Digest = decimalDigest;\nvar Xliff2Parser = /*@__PURE__*/ (function () {\n    function Xliff2Parser() {\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    Xliff2Parser.prototype.parse = /**\n     * @param {?} content\n     * @return {?}\n     */\n        function (content) {\n            this._unitMlString = null;\n            this._msgIdToHtml = {};\n            var /** @type {?} */ parser = new Parser(getXmlTagDefinition).parse(content, \"\", false);\n            this._errors = parser.errors;\n            visitAll(this, parser.rootNodes, null);\n            return {\n                msgIdToHtml: this._msgIdToHtml,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n        function (element, context) {\n            switch (element.name) {\n                case _UNIT_TAG$1:\n                    this._unitMlString = null;\n                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === \"id\"; });\n                    if (!idAttr) {\n                        this._addError(element, \"<\" + _UNIT_TAG$1 + \"> misses the \\\"id\\\" attribute\");\n                    }\n                    else {\n                        var /** @type {?} */ id = idAttr.value;\n                        if (this._msgIdToHtml.hasOwnProperty(id)) {\n                            this._addError(element, \"Duplicated translations for msg \" + id);\n                        }\n                        else {\n                            visitAll(this, element.children, null);\n                            if (typeof this._unitMlString === \"string\") {\n                                this._msgIdToHtml[id] = this._unitMlString;\n                            }\n                            else {\n                                this._addError(element, \"Message \" + id + \" misses a translation\");\n                            }\n                        }\n                    }\n                    break;\n                case _SOURCE_TAG$1:\n                    // ignore source message\n                    break;\n                case _TARGET_TAG$1:\n                    var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;\n                    var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;\n                    var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;\n                    var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                    this._unitMlString = innerText;\n                    break;\n                case _XLIFF_TAG:\n                    var /** @type {?} */ versionAttr = element.attrs.find(function (attr) { return attr.name === \"version\"; });\n                    if (versionAttr) {\n                        var /** @type {?} */ version = versionAttr.value;\n                        if (version !== \"2.0\") {\n                            this._addError(element, \"The XLIFF file version \" + version + \" is not compatible with XLIFF 2.0 serializer\");\n                        }\n                        else {\n                            visitAll(this, element.children, null);\n                        }\n                    }\n                    break;\n                default:\n                    visitAll(this, element.children, null);\n            }\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff2Parser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(node.sourceSpan, message));\n        };\n    return Xliff2Parser;\n}());\nvar XmlToI18n$1 = /*@__PURE__*/ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n            var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, \"\", true);\n            this._errors = xmlIcu.errors;\n            var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : [].concat.apply([], __spread(visitAll(this, xmlIcu.rootNodes)));\n            return {\n                i18nNodes: i18nNodes,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return new Text$1(text.value, text.sourceSpan);\n        };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n        function (el, context) {\n            var _this = this;\n            switch (el.name) {\n                case _PLACEHOLDER_TAG$1:\n                    var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === \"equiv\"; });\n                    if (nameAttr) {\n                        return [new Placeholder(\"\", nameAttr.value, el.sourceSpan)];\n                    }\n                    this._addError(el, \"<\" + _PLACEHOLDER_TAG$1 + \"> misses the \\\"equiv\\\" attribute\");\n                    break;\n                case _PLACEHOLDER_SPANNING_TAG:\n                    var /** @type {?} */ startAttr = el.attrs.find(function (attr) { return attr.name === \"equivStart\"; });\n                    var /** @type {?} */ endAttr = el.attrs.find(function (attr) { return attr.name === \"equivEnd\"; });\n                    if (!startAttr) {\n                        this._addError(el, \"<\" + _PLACEHOLDER_TAG$1 + \"> misses the \\\"equivStart\\\" attribute\");\n                    }\n                    else if (!endAttr) {\n                        this._addError(el, \"<\" + _PLACEHOLDER_TAG$1 + \"> misses the \\\"equivEnd\\\" attribute\");\n                    }\n                    else {\n                        var /** @type {?} */ startId = startAttr.value;\n                        var /** @type {?} */ endId = endAttr.value;\n                        var /** @type {?} */ nodes = [];\n                        return nodes.concat.apply(nodes, __spread([new Placeholder(\"\", startId, el.sourceSpan)], el.children.map(function (node) { return node.visit(_this, null); }), [new Placeholder(\"\", endId, el.sourceSpan)]));\n                    }\n                    break;\n                default:\n                    this._addError(el, \"Unexpected tag\");\n            }\n            return null;\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var /** @type {?} */ caseMap = {};\n            visitAll(this, icu.cases).forEach(function (c) {\n                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n            });\n            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n        };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (icuCase, context) {\n            return {\n                value: icuCase.value,\n                nodes: [].concat.apply([], __spread(visitAll(this, icuCase.expression)))\n            };\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(node.sourceSpan, message));\n        };\n    return XmlToI18n;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} message\n * @return {?}\n */\nfunction xmbMapper(message) {\n    return new SimplePlaceholderMapper(message, toPublicName);\n}\n/**\n * @param {?} internalName\n * @return {?}\n */\nfunction toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, \"_\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _TRANSLATIONS_TAG = \"translationbundle\";\nvar /** @type {?} */ _TRANSLATION_TAG = \"translation\";\nvar /** @type {?} */ _PLACEHOLDER_TAG$3 = \"ph\";\n/**\n * @param {?} content\n * @return {?}\n */\nfunction xtbLoadToI18n(content) {\n    // xtb to xml nodes\n    var /** @type {?} */ xtbParser = new XtbParser();\n    var _a = xtbParser.parse(content), msgIdToHtml = _a.msgIdToHtml, parseErrors = _a.errors;\n    if (parseErrors.length) {\n        throw new Error(\"xtb parse errors:\\n\" + parseErrors.join(\"\\n\"));\n    }\n    // xml nodes to i18n nodes\n    var /** @type {?} */ i18nNodesByMsgId = {};\n    var /** @type {?} */ converter = new XmlToI18n$2();\n    // Because we should be able to load xtb files that rely on features not supported by angular,\n    // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n    // converted\n    Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var /** @type {?} */ valueFn = function () {\n            var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, errors = _a.errors;\n            if (errors.length) {\n                throw new Error(\"xtb parse errors:\\n\" + errors.join(\"\\n\"));\n            }\n            return i18nNodes;\n        };\n        createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n    });\n    return i18nNodesByMsgId;\n}\nvar /** @type {?} */ xtbDigest = digest;\nvar /** @type {?} */ xtbMapper = xmbMapper;\n/**\n * @param {?} messages\n * @param {?} id\n * @param {?} valueFn\n * @return {?}\n */\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            var /** @type {?} */ value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value: value });\n            return value;\n        },\n        set: function (_) {\n            throw new Error(\"Could not overwrite an XTB translation\");\n        }\n    });\n}\nvar XtbParser = /*@__PURE__*/ (function () {\n    function XtbParser() {\n    }\n    /**\n     * @param {?} xtb\n     * @return {?}\n     */\n    XtbParser.prototype.parse = /**\n     * @param {?} xtb\n     * @return {?}\n     */\n        function (xtb) {\n            this._bundleDepth = 0;\n            this._msgIdToHtml = {};\n            // We can not parse the ICU messages at this point as some messages might not originate\n            // from Angular that could not be lex'd.\n            var /** @type {?} */ xml = new Parser(getXmlTagDefinition).parse(xtb, \"\", false);\n            this._errors = xml.errors;\n            visitAll(this, xml.rootNodes);\n            return {\n                msgIdToHtml: this._msgIdToHtml,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n        function (element, context) {\n            switch (element.name) {\n                case _TRANSLATIONS_TAG:\n                    this._bundleDepth++;\n                    if (this._bundleDepth > 1) {\n                        this._addError(element, \"<\" + _TRANSLATIONS_TAG + \"> elements can not be nested\");\n                    }\n                    visitAll(this, element.children, null);\n                    this._bundleDepth--;\n                    break;\n                case _TRANSLATION_TAG:\n                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === \"id\"; });\n                    if (!idAttr) {\n                        this._addError(element, \"<\" + _TRANSLATION_TAG + \"> misses the \\\"id\\\" attribute\");\n                    }\n                    else {\n                        var /** @type {?} */ id = idAttr.value;\n                        if (this._msgIdToHtml.hasOwnProperty(id)) {\n                            this._addError(element, \"Duplicated translations for msg \" + id);\n                        }\n                        else {\n                            var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;\n                            var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;\n                            var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;\n                            var /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));\n                            this._msgIdToHtml[id] = innerText;\n                        }\n                    }\n                    break;\n                default:\n                    this._addError(element, \"Unexpected tag\");\n            }\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XtbParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n        };\n    return XtbParser;\n}());\nvar XmlToI18n$2 = /*@__PURE__*/ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n            var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, \"\", true);\n            this._errors = xmlIcu.errors;\n            var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : visitAll(this, xmlIcu.rootNodes);\n            return {\n                i18nNodes: i18nNodes,\n                errors: this._errors\n            };\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan)));\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var /** @type {?} */ caseMap = {};\n            visitAll(this, icu.cases).forEach(function (c) {\n                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n            });\n            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n        };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (icuCase, context) {\n            return {\n                value: icuCase.value,\n                nodes: visitAll(this, icuCase.expression)\n            };\n        };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n        function (el, context) {\n            if (el.name === _PLACEHOLDER_TAG$3) {\n                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === \"name\"; });\n                if (nameAttr) {\n                    return new Placeholder(\"\", nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n                }\n                this._addError(el, \"<\" + _PLACEHOLDER_TAG$3 + \"> misses the \\\"name\\\" attribute\");\n            }\n            else {\n                this._addError(el, \"Unexpected tag\");\n            }\n            return null;\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n        function (node, message) {\n            this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n        };\n    return XmlToI18n;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ParserError = /*@__PURE__*/ (function () {\n    function ParserError(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = \"Parser Error: \" + message + \" \" + errLocation + \" [\" + input + \"] in \" + ctxLocation;\n    }\n    return ParserError;\n}());\nvar ParseSpan = /*@__PURE__*/ (function () {\n    function ParseSpan(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    return ParseSpan;\n}());\nvar AST = /*@__PURE__*/ (function () {\n    function AST(span) {\n        this.span = span;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    AST.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return null;\n        };\n    /**\n     * @return {?}\n     */\n    AST.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return \"AST\";\n        };\n    return AST;\n}());\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nvar /**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */ Quote = /*@__PURE__*/ (function (_super) {\n    __extends(Quote, _super);\n    function Quote(span, prefix, uninterpretedExpression, location) {\n        var _this = _super.call(this, span) || this;\n        _this.prefix = prefix;\n        _this.uninterpretedExpression = uninterpretedExpression;\n        _this.location = location;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Quote.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitQuote(this, context);\n        };\n    /**\n     * @return {?}\n     */\n    Quote.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return \"Quote\";\n        };\n    return Quote;\n}(AST));\nvar EmptyExpr = /*@__PURE__*/ (function (_super) {\n    __extends(EmptyExpr, _super);\n    function EmptyExpr() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    EmptyExpr.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            // do nothing\n        };\n    return EmptyExpr;\n}(AST));\nvar ImplicitReceiver = /*@__PURE__*/ (function (_super) {\n    __extends(ImplicitReceiver, _super);\n    function ImplicitReceiver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ImplicitReceiver.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitImplicitReceiver(this, context);\n        };\n    return ImplicitReceiver;\n}(AST));\n/**\n * Multiple expressions separated by a semicolon.\n */\nvar /**\n * Multiple expressions separated by a semicolon.\n */ Chain = /*@__PURE__*/ (function (_super) {\n    __extends(Chain, _super);\n    function Chain(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Chain.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitChain(this, context);\n        };\n    return Chain;\n}(AST));\nvar Conditional = /*@__PURE__*/ (function (_super) {\n    __extends(Conditional, _super);\n    function Conditional(span, condition, trueExp, falseExp) {\n        var _this = _super.call(this, span) || this;\n        _this.condition = condition;\n        _this.trueExp = trueExp;\n        _this.falseExp = falseExp;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Conditional.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitConditional(this, context);\n        };\n    return Conditional;\n}(AST));\nvar PropertyRead = /*@__PURE__*/ (function (_super) {\n    __extends(PropertyRead, _super);\n    function PropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitPropertyRead(this, context);\n        };\n    return PropertyRead;\n}(AST));\nvar PropertyWrite = /*@__PURE__*/ (function (_super) {\n    __extends(PropertyWrite, _super);\n    function PropertyWrite(span, receiver, name, value) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitPropertyWrite(this, context);\n        };\n    return PropertyWrite;\n}(AST));\nvar SafePropertyRead = /*@__PURE__*/ (function (_super) {\n    __extends(SafePropertyRead, _super);\n    function SafePropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafePropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitSafePropertyRead(this, context);\n        };\n    return SafePropertyRead;\n}(AST));\nvar KeyedRead = /*@__PURE__*/ (function (_super) {\n    __extends(KeyedRead, _super);\n    function KeyedRead(span, obj, key) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitKeyedRead(this, context);\n        };\n    return KeyedRead;\n}(AST));\nvar KeyedWrite = /*@__PURE__*/ (function (_super) {\n    __extends(KeyedWrite, _super);\n    function KeyedWrite(span, obj, key, value) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitKeyedWrite(this, context);\n        };\n    return KeyedWrite;\n}(AST));\nvar BindingPipe = /*@__PURE__*/ (function (_super) {\n    __extends(BindingPipe, _super);\n    function BindingPipe(span, exp, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.exp = exp;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    BindingPipe.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitPipe(this, context);\n        };\n    return BindingPipe;\n}(AST));\nvar LiteralPrimitive = /*@__PURE__*/ (function (_super) {\n    __extends(LiteralPrimitive, _super);\n    function LiteralPrimitive(span, value) {\n        var _this = _super.call(this, span) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralPrimitive.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitLiteralPrimitive(this, context);\n        };\n    return LiteralPrimitive;\n}(AST));\nvar LiteralArray = /*@__PURE__*/ (function (_super) {\n    __extends(LiteralArray, _super);\n    function LiteralArray(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralArray.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitLiteralArray(this, context);\n        };\n    return LiteralArray;\n}(AST));\nvar LiteralMap = /*@__PURE__*/ (function (_super) {\n    __extends(LiteralMap, _super);\n    function LiteralMap(span, keys, values) {\n        var _this = _super.call(this, span) || this;\n        _this.keys = keys;\n        _this.values = values;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralMap.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitLiteralMap(this, context);\n        };\n    return LiteralMap;\n}(AST));\nvar Interpolation = /*@__PURE__*/ (function (_super) {\n    __extends(Interpolation, _super);\n    function Interpolation(span, strings, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.strings = strings;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Interpolation.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitInterpolation(this, context);\n        };\n    return Interpolation;\n}(AST));\nvar Binary = /*@__PURE__*/ (function (_super) {\n    __extends(Binary, _super);\n    function Binary(span, operation, left, right) {\n        var _this = _super.call(this, span) || this;\n        _this.operation = operation;\n        _this.left = left;\n        _this.right = right;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Binary.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitBinary(this, context);\n        };\n    return Binary;\n}(AST));\nvar PrefixNot = /*@__PURE__*/ (function (_super) {\n    __extends(PrefixNot, _super);\n    function PrefixNot(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PrefixNot.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitPrefixNot(this, context);\n        };\n    return PrefixNot;\n}(AST));\nvar NonNullAssert = /*@__PURE__*/ (function (_super) {\n    __extends(NonNullAssert, _super);\n    function NonNullAssert(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    NonNullAssert.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitNonNullAssert(this, context);\n        };\n    return NonNullAssert;\n}(AST));\nvar MethodCall = /*@__PURE__*/ (function (_super) {\n    __extends(MethodCall, _super);\n    function MethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    MethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitMethodCall(this, context);\n        };\n    return MethodCall;\n}(AST));\nvar SafeMethodCall = /*@__PURE__*/ (function (_super) {\n    __extends(SafeMethodCall, _super);\n    function SafeMethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafeMethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitSafeMethodCall(this, context);\n        };\n    return SafeMethodCall;\n}(AST));\nvar FunctionCall = /*@__PURE__*/ (function (_super) {\n    __extends(FunctionCall, _super);\n    function FunctionCall(span, target, args) {\n        var _this = _super.call(this, span) || this;\n        _this.target = target;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    FunctionCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return visitor.visitFunctionCall(this, context);\n        };\n    return FunctionCall;\n}(AST));\nvar ASTWithSource = /*@__PURE__*/ (function (_super) {\n    __extends(ASTWithSource, _super);\n    function ASTWithSource(ast, source, location, errors) {\n        var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;\n        _this.ast = ast;\n        _this.source = source;\n        _this.location = location;\n        _this.errors = errors;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ASTWithSource.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n        function (visitor, context) {\n            if (context === void 0) {\n                context = null;\n            }\n            return this.ast.visit(visitor, context);\n        };\n    /**\n     * @return {?}\n     */\n    ASTWithSource.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return this.source + \" in \" + this.location;\n        };\n    return ASTWithSource;\n}(AST));\nvar TemplateBinding = /*@__PURE__*/ (function () {\n    function TemplateBinding(span, key, keyIsVar, name, expression) {\n        this.span = span;\n        this.key = key;\n        this.keyIsVar = keyIsVar;\n        this.name = name;\n        this.expression = expression;\n    }\n    return TemplateBinding;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar TokenType$1 = /*@__PURE__*/ (function () {\n    var TokenType$1 = {\n        Character: 0,\n        Identifier: 1,\n        Keyword: 2,\n        String: 3,\n        Operator: 4,\n        Number: 5,\n        Error: 6,\n    };\n    TokenType$1[TokenType$1.Character] = \"Character\";\n    TokenType$1[TokenType$1.Identifier] = \"Identifier\";\n    TokenType$1[TokenType$1.Keyword] = \"Keyword\";\n    TokenType$1[TokenType$1.String] = \"String\";\n    TokenType$1[TokenType$1.Operator] = \"Operator\";\n    TokenType$1[TokenType$1.Number] = \"Number\";\n    TokenType$1[TokenType$1.Error] = \"Error\";\n    return TokenType$1;\n}());\nvar /** @type {?} */ KEYWORDS = [\"var\", \"let\", \"as\", \"null\", \"undefined\", \"true\", \"false\", \"if\", \"else\", \"this\"];\nvar Lexer = /*@__PURE__*/ (function () {\n    function Lexer() {\n    }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    Lexer.prototype.tokenize = /**\n     * @param {?} text\n     * @return {?}\n     */\n        function (text) {\n            var /** @type {?} */ scanner = new Scanner(text);\n            var /** @type {?} */ tokens = [];\n            var /** @type {?} */ token = scanner.scanToken();\n            while (token != null) {\n                tokens.push(token);\n                token = scanner.scanToken();\n            }\n            return tokens;\n        };\n    return Lexer;\n}());\nvar Token$1 = /*@__PURE__*/ (function () {\n    function Token(index, type, numValue, strValue) {\n        this.index = index;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    Token.prototype.isCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n        function (code) {\n            return this.type === TokenType$1.Character && this.numValue === code;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isNumber = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Number;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isString = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.String;\n        };\n    /**\n     * @param {?} operater\n     * @return {?}\n     */\n    Token.prototype.isOperator = /**\n     * @param {?} operater\n     * @return {?}\n     */\n        function (operater) {\n            return this.type === TokenType$1.Operator && this.strValue === operater;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isIdentifier = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Identifier;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeyword = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordLet = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"let\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordAs = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"as\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordNull = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"null\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordUndefined = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"undefined\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordTrue = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"true\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordFalse = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"false\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordThis = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Keyword && this.strValue === \"this\";\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isError = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Error;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toNumber = /**\n     * @return {?}\n     */\n        function () {\n            return this.type === TokenType$1.Number ? this.numValue : -1;\n        };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            switch (this.type) {\n                case TokenType$1.Character:\n                case TokenType$1.Identifier:\n                case TokenType$1.Keyword:\n                case TokenType$1.Operator:\n                case TokenType$1.String:\n                case TokenType$1.Error:\n                    return this.strValue;\n                case TokenType$1.Number:\n                    return this.numValue.toString();\n                default:\n                    return null;\n            }\n        };\n    return Token;\n}());\n/**\n * @param {?} index\n * @param {?} code\n * @return {?}\n */\nfunction newCharacterToken(index, code) {\n    return new Token$1(index, TokenType$1.Character, code, String.fromCharCode(code));\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newIdentifierToken(index, text) {\n    return new Token$1(index, TokenType$1.Identifier, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newKeywordToken(index, text) {\n    return new Token$1(index, TokenType$1.Keyword, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newOperatorToken(index, text) {\n    return new Token$1(index, TokenType$1.Operator, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newStringToken(index, text) {\n    return new Token$1(index, TokenType$1.String, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} n\n * @return {?}\n */\nfunction newNumberToken(index, n) {\n    return new Token$1(index, TokenType$1.Number, n, \"\");\n}\n/**\n * @param {?} index\n * @param {?} message\n * @return {?}\n */\nfunction newErrorToken(index, message) {\n    return new Token$1(index, TokenType$1.Error, 0, message);\n}\nvar /** @type {?} */ EOF = /*@__PURE__*/ new Token$1(-1, TokenType$1.Character, 0, \"\");\nvar Scanner = /*@__PURE__*/ (function () {\n    function Scanner(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    /**\n     * @return {?}\n     */\n    Scanner.prototype.advance = /**\n     * @return {?}\n     */\n        function () {\n            this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n        };\n    /**\n     * @return {?}\n     */\n    Scanner.prototype.scanToken = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ input = this.input;\n            var /** @type {?} */ length = this.length;\n            var /** @type {?} */ peek = this.peek;\n            var /** @type {?} */ index = this.index;\n            // Skip whitespace.\n            while (peek <= $SPACE) {\n                if (++index >= length) {\n                    peek = $EOF;\n                    break;\n                }\n                else {\n                    peek = input.charCodeAt(index);\n                }\n            }\n            this.peek = peek;\n            this.index = index;\n            if (index >= length) {\n                return null;\n            }\n            // Handle identifiers and numbers.\n            if (isIdentifierStart(peek)) {\n                return this.scanIdentifier();\n            }\n            if (isDigit(peek)) {\n                return this.scanNumber(index);\n            }\n            var /** @type {?} */ start = index;\n            switch (peek) {\n                case $PERIOD:\n                    this.advance();\n                    return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);\n                case $LPAREN:\n                case $RPAREN:\n                case $LBRACE:\n                case $RBRACE:\n                case $LBRACKET:\n                case $RBRACKET:\n                case $COMMA:\n                case $COLON:\n                case $SEMICOLON:\n                    return this.scanCharacter(start, peek);\n                case $SQ:\n                case $DQ:\n                    return this.scanString();\n                case $HASH:\n                case $PLUS:\n                case $MINUS:\n                case $STAR:\n                case $SLASH:\n                case $PERCENT:\n                case $CARET:\n                    return this.scanOperator(start, String.fromCharCode(peek));\n                case $QUESTION:\n                    return this.scanComplexOperator(start, \"?\", $PERIOD, \".\");\n                case $LT:\n                case $GT:\n                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, \"=\");\n                case $BANG:\n                case $EQ:\n                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, \"=\", $EQ, \"=\");\n                case $AMPERSAND:\n                    return this.scanComplexOperator(start, \"&\", $AMPERSAND, \"&\");\n                case $BAR:\n                    return this.scanComplexOperator(start, \"|\", $BAR, \"|\");\n                case $NBSP:\n                    while (isWhitespace(this.peek)) {\n                        this.advance();\n                    }\n                    return this.scanToken();\n            }\n            this.advance();\n            return this.error(\"Unexpected character [\" + String.fromCharCode(peek) + \"]\", 0);\n        };\n    /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n    Scanner.prototype.scanCharacter = /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n        function (start, code) {\n            this.advance();\n            return newCharacterToken(start, code);\n        };\n    /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n    Scanner.prototype.scanOperator = /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n        function (start, str) {\n            this.advance();\n            return newOperatorToken(start, str);\n        };\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n    Scanner.prototype.scanComplexOperator = /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n        function (start, one, twoCode, two, threeCode, three) {\n            this.advance();\n            var /** @type {?} */ str = one;\n            if (this.peek === twoCode) {\n                this.advance();\n                str += two;\n            }\n            if (threeCode != null && this.peek === threeCode) {\n                this.advance();\n                str += three;\n            }\n            return newOperatorToken(start, str);\n        };\n    /**\n     * @return {?}\n     */\n    Scanner.prototype.scanIdentifier = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this.index;\n            this.advance();\n            while (isIdentifierPart(this.peek)) {\n                this.advance();\n            }\n            var /** @type {?} */ str = this.input.substring(start, this.index);\n            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);\n        };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    Scanner.prototype.scanNumber = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            var /** @type {?} */ simple = this.index === start;\n            this.advance(); // Skip initial digit.\n            while (true) {\n                if (isDigit(this.peek))\n                    ;\n                else if (this.peek === $PERIOD) {\n                    simple = false;\n                }\n                else if (isExponentStart(this.peek)) {\n                    this.advance();\n                    if (isExponentSign(this.peek)) {\n                        this.advance();\n                    }\n                    if (!isDigit(this.peek)) {\n                        return this.error(\"Invalid exponent\", -1);\n                    }\n                    simple = false;\n                }\n                else {\n                    break;\n                }\n                this.advance();\n            }\n            var /** @type {?} */ str = this.input.substring(start, this.index);\n            var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n            return newNumberToken(start, value);\n        };\n    /**\n     * @return {?}\n     */\n    Scanner.prototype.scanString = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this.index;\n            var /** @type {?} */ quote = this.peek;\n            this.advance(); // Skip initial quote.\n            var /** @type {?} */ buffer = \"\";\n            var /** @type {?} */ marker = this.index;\n            var /** @type {?} */ input = this.input;\n            while (this.peek !== quote) {\n                if (this.peek === $BACKSLASH) {\n                    buffer += input.substring(marker, this.index);\n                    this.advance();\n                    var /** @type {?} */ unescapedCode = void 0;\n                    // Workaround for TS2.1-introduced type strictness\n                    this.peek = this.peek;\n                    if (this.peek === $u) {\n                        // 4 character hex code for unicode character.\n                        var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);\n                        if (/^[0-9a-f]+$/i.test(hex)) {\n                            unescapedCode = parseInt(hex, 16);\n                        }\n                        else {\n                            return this.error(\"Invalid unicode escape [\\\\u\" + hex + \"]\", 0);\n                        }\n                        for (var /** @type {?} */ i = 0; i < 5; i++) {\n                            this.advance();\n                        }\n                    }\n                    else {\n                        unescapedCode = unescape(this.peek);\n                        this.advance();\n                    }\n                    buffer += String.fromCharCode(unescapedCode);\n                    marker = this.index;\n                }\n                else if (this.peek === $EOF) {\n                    return this.error(\"Unterminated quote\", 0);\n                }\n                else {\n                    this.advance();\n                }\n            }\n            var /** @type {?} */ last = input.substring(marker, this.index);\n            this.advance(); // Skip terminating quote.\n            return newStringToken(start, buffer + last);\n        };\n    /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n    Scanner.prototype.error = /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n        function (message, offset) {\n            var /** @type {?} */ position = this.index + offset;\n            return newErrorToken(position, \"Lexer Error: \" + message + \" at column \" + position + \" in expression [\" + this.input + \"]\");\n        };\n    return Scanner;\n}());\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierStart(code) {\n    return (($a <= code && code <= $z) ||\n        ($A <= code && code <= $Z) ||\n        code === $_ ||\n        code === $$);\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction isIdentifier(input) {\n    if (input.length === 0) {\n        return false;\n    }\n    var /** @type {?} */ scanner = new Scanner(input);\n    if (!isIdentifierStart(scanner.peek)) {\n        return false;\n    }\n    scanner.advance();\n    while (scanner.peek !== $EOF) {\n        if (!isIdentifierPart(scanner.peek)) {\n            return false;\n        }\n        scanner.advance();\n    }\n    return true;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierPart(code) {\n    return isAsciiLetter(code) || isDigit(code) || code === $_ || code === $$;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentStart(code) {\n    return code === $e || code === $E;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentSign(code) {\n    return code === $MINUS || code === $PLUS;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isQuote(code) {\n    return code === $SQ || code === $DQ || code === $BT;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction unescape(code) {\n    switch (code) {\n        case $n:\n            return $LF;\n        case $f:\n            return $FF;\n        case $r:\n            return $CR;\n        case $t:\n            return $TAB;\n        case $v:\n            return $VTAB;\n        default:\n            return code;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    var /** @type {?} */ result = parseInt(text, 10);\n    if (isNaN(result)) {\n        throw new Error(\"Invalid integer literal when parsing \" + text);\n    }\n    return result;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar SplitInterpolation = /*@__PURE__*/ (function () {\n    function SplitInterpolation(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n    return SplitInterpolation;\n}());\nvar TemplateBindingParseResult = /*@__PURE__*/ (function () {\n    function TemplateBindingParseResult(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n    return TemplateBindingParseResult;\n}());\n/**\n * @param {?} config\n * @return {?}\n */\nfunction _createInterpolateRegExp(config) {\n    var /** @type {?} */ pattern = escapeRegExp(config.start) + \"([\\\\s\\\\S]*?)\" + escapeRegExp(config.end);\n    return new RegExp(pattern, \"g\");\n}\nvar Parser$1 = /*@__PURE__*/ (function () {\n    function Parser(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n    }\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseAction = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            this._checkNoInterpolation(input, location, interpolationConfig);\n            var /** @type {?} */ sourceToLex = this._stripComments(input);\n            var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\n            var /** @type {?} */ ast = new ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();\n            return new ASTWithSource(ast, input, location, this.errors);\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n            return new ASTWithSource(ast, input, location, this.errors);\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseSimpleBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n            var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);\n            if (errors.length > 0) {\n                this._reportError(\"Host binding expression cannot contain \" + errors.join(\" \"), input, location);\n            }\n            return new ASTWithSource(ast, input, location, this.errors);\n        };\n    /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n    Parser.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n        function (message, input, errLocation, ctxLocation) {\n            this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._parseBindingAst = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            // Quotes expressions use 3rd-party expression language. We don't want to use\n            // our lexer or parser for that, so we check for that ahead of time.\n            var /** @type {?} */ quote = this._parseQuote(input, location);\n            if (quote != null) {\n                return quote;\n            }\n            this._checkNoInterpolation(input, location, interpolationConfig);\n            var /** @type {?} */ sourceToLex = this._stripComments(input);\n            var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n            return new ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype._parseQuote = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n        function (input, location) {\n            if (input === null) {\n                return null;\n            }\n            var /** @type {?} */ prefixSeparatorIndex = input.indexOf(\":\");\n            if (prefixSeparatorIndex === -1) {\n                return null;\n            }\n            var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();\n            if (!isIdentifier(prefix)) {\n                return null;\n            }\n            var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n            return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n        };\n    /**\n     * @param {?} prefixToken\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.parseTemplateBindings = /**\n     * @param {?} prefixToken\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n        function (prefixToken, input, location) {\n            var /** @type {?} */ tokens = this._lexer.tokenize(input);\n            if (prefixToken) {\n                // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\n                var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {\n                    t.index = 0;\n                    return t;\n                });\n                tokens.unshift.apply(tokens, __spread(prefixTokens));\n            }\n            return new ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);\n            if (split === null) {\n                return null;\n            }\n            var /** @type {?} */ expressions = [];\n            for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {\n                var /** @type {?} */ expressionText = split.expressions[i];\n                var /** @type {?} */ sourceToLex = this._stripComments(expressionText);\n                var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n                var /** @type {?} */ ast = new ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();\n                expressions.push(ast);\n            }\n            return new ASTWithSource(new Interpolation(new ParseSpan(0, input === null ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.splitInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n            var /** @type {?} */ parts = input.split(regexp);\n            if (parts.length <= 1) {\n                return null;\n            }\n            var /** @type {?} */ strings = [];\n            var /** @type {?} */ expressions = [];\n            var /** @type {?} */ offsets = [];\n            var /** @type {?} */ offset = 0;\n            for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n                var /** @type {?} */ part = parts[i];\n                if (i % 2 === 0) {\n                    // fixed string\n                    strings.push(part);\n                    offset += part.length;\n                }\n                else if (part.trim().length > 0) {\n                    offset += interpolationConfig.start.length;\n                    expressions.push(part);\n                    offsets.push(offset);\n                    offset += part.length + interpolationConfig.end.length;\n                }\n                else {\n                    this._reportError(\"Blank expressions are not allowed in interpolated strings\", input, \"at column \" + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + \" in\", location);\n                    expressions.push(\"$implict\");\n                    offsets.push(offset);\n                }\n            }\n            return new SplitInterpolation(strings, expressions, offsets);\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.wrapLiteralPrimitive = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n        function (input, location) {\n            return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input === null ? 0 : input.length), input), input, location, this.errors);\n        };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._stripComments = /**\n     * @param {?} input\n     * @return {?}\n     */\n        function (input) {\n            var /** @type {?} */ i = this._commentStart(input);\n            return i != null ? input.substring(0, i).trim() : input;\n        };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._commentStart = /**\n     * @param {?} input\n     * @return {?}\n     */\n        function (input) {\n            var /** @type {?} */ outerQuote = null;\n            for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {\n                var /** @type {?} */ char = input.charCodeAt(i);\n                var /** @type {?} */ nextChar = input.charCodeAt(i + 1);\n                if (char === $SLASH && nextChar === $SLASH && outerQuote === null) {\n                    return i;\n                }\n                if (outerQuote === char) {\n                    outerQuote = null;\n                }\n                else if (outerQuote === null && isQuote(char)) {\n                    outerQuote = char;\n                }\n            }\n            return null;\n        };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._checkNoInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n        function (input, location, interpolationConfig) {\n            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n            var /** @type {?} */ parts = input.split(regexp);\n            if (parts.length > 1) {\n                this._reportError(\"Got interpolation (\" + interpolationConfig.start + interpolationConfig.end + \") where expression was expected\", input, \"at column \" + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + \" in\", location);\n            }\n        };\n    /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._findInterpolationErrorColumn = /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n        function (parts, partInErrIdx, interpolationConfig) {\n            var /** @type {?} */ errLocation = \"\";\n            for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {\n                errLocation += j % 2 === 0 ? parts[j] : \"\" + interpolationConfig.start + parts[j] + interpolationConfig.end;\n            }\n            return errLocation.length;\n        };\n    return Parser;\n}());\nvar ParseAST = /*@__PURE__*/ (function () {\n    function ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.tokens = tokens;\n        this.inputLength = inputLength;\n        this.parseAction = parseAction;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.index = 0;\n    }\n    /**\n     * @param {?} offset\n     * @return {?}\n     */\n    ParseAST.prototype.peek = /**\n     * @param {?} offset\n     * @return {?}\n     */\n        function (offset) {\n            var /** @type {?} */ i = this.index + offset;\n            return i < this.tokens.length ? this.tokens[i] : EOF;\n        };\n    Object.defineProperty(ParseAST.prototype, \"next\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.peek(0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParseAST.prototype, \"inputIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    ParseAST.prototype.span = /**\n     * @param {?} start\n     * @return {?}\n     */\n        function (start) {\n            return new ParseSpan(start, this.inputIndex);\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.advance = /**\n     * @return {?}\n     */\n        function () {\n            this.index++;\n        };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    ParseAST.prototype.optionalCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n        function (code) {\n            if (this.next.isCharacter(code)) {\n                this.advance();\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.peekKeywordLet = /**\n     * @return {?}\n     */\n        function () {\n            return this.next.isKeywordLet();\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.peekKeywordAs = /**\n     * @return {?}\n     */\n        function () {\n            return this.next.isKeywordAs();\n        };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    ParseAST.prototype.expectCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n        function (code) {\n            if (this.optionalCharacter(code)) {\n                return;\n            }\n            this.error(\"Missing expected \" + String.fromCharCode(code));\n        };\n    /**\n     * @param {?} op\n     * @return {?}\n     */\n    ParseAST.prototype.optionalOperator = /**\n     * @param {?} op\n     * @return {?}\n     */\n        function (op) {\n            if (this.next.isOperator(op)) {\n                this.advance();\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @param {?} operator\n     * @return {?}\n     */\n    ParseAST.prototype.expectOperator = /**\n     * @param {?} operator\n     * @return {?}\n     */\n        function (operator) {\n            if (this.optionalOperator(operator)) {\n                return;\n            }\n            this.error(\"Missing expected operator \" + operator);\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.expectIdentifierOrKeyword = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ n = this.next;\n            if (!n.isIdentifier() && !n.isKeyword()) {\n                this.error(\"Unexpected token \" + n + \", expected identifier or keyword\");\n                return \"\";\n            }\n            this.advance();\n            return /** @type {?} */ (n.toString());\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.expectIdentifierOrKeywordOrString = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ n = this.next;\n            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n                this.error(\"Unexpected token \" + n + \", expected identifier, keyword, or string\");\n                return \"\";\n            }\n            this.advance();\n            return /** @type {?} */ (n.toString());\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseChain = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ exprs = [];\n            var /** @type {?} */ start = this.inputIndex;\n            while (this.index < this.tokens.length) {\n                var /** @type {?} */ expr = this.parsePipe();\n                exprs.push(expr);\n                if (this.optionalCharacter($SEMICOLON)) {\n                    if (!this.parseAction) {\n                        this.error(\"Binding expression cannot contain chained expression\");\n                    }\n                    while (this.optionalCharacter($SEMICOLON)) { } // read all semicolons\n                }\n                else if (this.index < this.tokens.length) {\n                    this.error(\"Unexpected token '\" + this.next + \"'\");\n                }\n            }\n            if (exprs.length === 0) {\n                return new EmptyExpr(this.span(start));\n            }\n            if (exprs.length === 1) {\n                return exprs[0];\n            }\n            return new Chain(this.span(start), exprs);\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parsePipe = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ result = this.parseExpression();\n            if (this.optionalOperator(\"|\")) {\n                if (this.parseAction) {\n                    this.error(\"Cannot have a pipe in an action expression\");\n                }\n                do {\n                    var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();\n                    var /** @type {?} */ args = [];\n                    while (this.optionalCharacter($COLON)) {\n                        args.push(this.parseExpression());\n                    }\n                    result = new BindingPipe(this.span(result.span.start), result, name_1, args);\n                } while (this.optionalOperator(\"|\"));\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseExpression = /**\n     * @return {?}\n     */\n        function () {\n            return this.parseConditional();\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseConditional = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this.inputIndex;\n            var /** @type {?} */ result = this.parseLogicalOr();\n            if (this.optionalOperator(\"?\")) {\n                var /** @type {?} */ yes = this.parsePipe();\n                var /** @type {?} */ no = void 0;\n                if (!this.optionalCharacter($COLON)) {\n                    var /** @type {?} */ end = this.inputIndex;\n                    var /** @type {?} */ expression = this.input.substring(start, end);\n                    this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                    no = new EmptyExpr(this.span(start));\n                }\n                else {\n                    no = this.parsePipe();\n                }\n                return new Conditional(this.span(start), result, yes, no);\n            }\n            else {\n                return result;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseLogicalOr = /**\n     * @return {?}\n     */\n        function () {\n            // '||'\n            var /** @type {?} */ result = this.parseLogicalAnd();\n            while (this.optionalOperator(\"||\")) {\n                var /** @type {?} */ right = this.parseLogicalAnd();\n                result = new Binary(this.span(result.span.start), \"||\", result, right);\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseLogicalAnd = /**\n     * @return {?}\n     */\n        function () {\n            // '&&'\n            var /** @type {?} */ result = this.parseEquality();\n            while (this.optionalOperator(\"&&\")) {\n                var /** @type {?} */ right = this.parseEquality();\n                result = new Binary(this.span(result.span.start), \"&&\", result, right);\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseEquality = /**\n     * @return {?}\n     */\n        function () {\n            // '==','!=','===','!=='\n            var /** @type {?} */ result = this.parseRelational();\n            while (this.next.type === TokenType$1.Operator) {\n                var /** @type {?} */ operator = this.next.strValue;\n                switch (operator) {\n                    case \"==\":\n                    case \"===\":\n                    case \"!=\":\n                    case \"!==\":\n                        this.advance();\n                        var /** @type {?} */ right = this.parseRelational();\n                        result = new Binary(this.span(result.span.start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseRelational = /**\n     * @return {?}\n     */\n        function () {\n            // '<', '>', '<=', '>='\n            var /** @type {?} */ result = this.parseAdditive();\n            while (this.next.type === TokenType$1.Operator) {\n                var /** @type {?} */ operator = this.next.strValue;\n                switch (operator) {\n                    case \"<\":\n                    case \">\":\n                    case \"<=\":\n                    case \">=\":\n                        this.advance();\n                        var /** @type {?} */ right = this.parseAdditive();\n                        result = new Binary(this.span(result.span.start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseAdditive = /**\n     * @return {?}\n     */\n        function () {\n            // '+', '-'\n            var /** @type {?} */ result = this.parseMultiplicative();\n            while (this.next.type === TokenType$1.Operator) {\n                var /** @type {?} */ operator = this.next.strValue;\n                switch (operator) {\n                    case \"+\":\n                    case \"-\":\n                        this.advance();\n                        var /** @type {?} */ right = this.parseMultiplicative();\n                        result = new Binary(this.span(result.span.start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseMultiplicative = /**\n     * @return {?}\n     */\n        function () {\n            // '*', '%', '/'\n            var /** @type {?} */ result = this.parsePrefix();\n            while (this.next.type === TokenType$1.Operator) {\n                var /** @type {?} */ operator = this.next.strValue;\n                switch (operator) {\n                    case \"*\":\n                    case \"%\":\n                    case \"/\":\n                        this.advance();\n                        var /** @type {?} */ right = this.parsePrefix();\n                        result = new Binary(this.span(result.span.start), operator, result, right);\n                        continue;\n                }\n                break;\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parsePrefix = /**\n     * @return {?}\n     */\n        function () {\n            if (this.next.type === TokenType$1.Operator) {\n                var /** @type {?} */ start = this.inputIndex;\n                var /** @type {?} */ operator = this.next.strValue;\n                var /** @type {?} */ result = void 0;\n                switch (operator) {\n                    case \"+\":\n                        this.advance();\n                        return this.parsePrefix();\n                    case \"-\":\n                        this.advance();\n                        result = this.parsePrefix();\n                        return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                    case \"!\":\n                        this.advance();\n                        result = this.parsePrefix();\n                        return new PrefixNot(this.span(start), result);\n                }\n            }\n            return this.parseCallChain();\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseCallChain = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ result = this.parsePrimary();\n            while (true) {\n                if (this.optionalCharacter($PERIOD)) {\n                    result = this.parseAccessMemberOrMethodCall(result, false);\n                }\n                else if (this.optionalOperator(\"?.\")) {\n                    result = this.parseAccessMemberOrMethodCall(result, true);\n                }\n                else if (this.optionalCharacter($LBRACKET)) {\n                    this.rbracketsExpected++;\n                    var /** @type {?} */ key = this.parsePipe();\n                    this.rbracketsExpected--;\n                    this.expectCharacter($RBRACKET);\n                    if (this.optionalOperator(\"=\")) {\n                        var /** @type {?} */ value = this.parseConditional();\n                        result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                    }\n                    else {\n                        result = new KeyedRead(this.span(result.span.start), result, key);\n                    }\n                }\n                else if (this.optionalCharacter($LPAREN)) {\n                    this.rparensExpected++;\n                    var /** @type {?} */ args = this.parseCallArguments();\n                    this.rparensExpected--;\n                    this.expectCharacter($RPAREN);\n                    result = new FunctionCall(this.span(result.span.start), result, args);\n                }\n                else if (this.optionalOperator(\"!\")) {\n                    result = new NonNullAssert(this.span(result.span.start), result);\n                }\n                else {\n                    return result;\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parsePrimary = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ start = this.inputIndex;\n            if (this.optionalCharacter($LPAREN)) {\n                this.rparensExpected++;\n                var /** @type {?} */ result = this.parsePipe();\n                this.rparensExpected--;\n                this.expectCharacter($RPAREN);\n                return result;\n            }\n            else if (this.next.isKeywordNull()) {\n                this.advance();\n                return new LiteralPrimitive(this.span(start), null);\n            }\n            else if (this.next.isKeywordUndefined()) {\n                this.advance();\n                return new LiteralPrimitive(this.span(start), void 0);\n            }\n            else if (this.next.isKeywordTrue()) {\n                this.advance();\n                return new LiteralPrimitive(this.span(start), true);\n            }\n            else if (this.next.isKeywordFalse()) {\n                this.advance();\n                return new LiteralPrimitive(this.span(start), false);\n            }\n            else if (this.next.isKeywordThis()) {\n                this.advance();\n                return new ImplicitReceiver(this.span(start));\n            }\n            else if (this.optionalCharacter($LBRACKET)) {\n                this.rbracketsExpected++;\n                var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);\n                this.rbracketsExpected--;\n                this.expectCharacter($RBRACKET);\n                return new LiteralArray(this.span(start), elements);\n            }\n            else if (this.next.isCharacter($LBRACE)) {\n                return this.parseLiteralMap();\n            }\n            else if (this.next.isIdentifier()) {\n                return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n            }\n            else if (this.next.isNumber()) {\n                var /** @type {?} */ value = this.next.toNumber();\n                this.advance();\n                return new LiteralPrimitive(this.span(start), value);\n            }\n            else if (this.next.isString()) {\n                var /** @type {?} */ literalValue = this.next.toString();\n                this.advance();\n                return new LiteralPrimitive(this.span(start), literalValue);\n            }\n            else if (this.index >= this.tokens.length) {\n                this.error(\"Unexpected end of expression: \" + this.input);\n                return new EmptyExpr(this.span(start));\n            }\n            else {\n                this.error(\"Unexpected token \" + this.next);\n                return new EmptyExpr(this.span(start));\n            }\n        };\n    /**\n     * @param {?} terminator\n     * @return {?}\n     */\n    ParseAST.prototype.parseExpressionList = /**\n     * @param {?} terminator\n     * @return {?}\n     */\n        function (terminator) {\n            var /** @type {?} */ result = [];\n            if (!this.next.isCharacter(terminator)) {\n                do {\n                    result.push(this.parsePipe());\n                } while (this.optionalCharacter($COMMA));\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseLiteralMap = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ keys = [];\n            var /** @type {?} */ values = [];\n            var /** @type {?} */ start = this.inputIndex;\n            this.expectCharacter($LBRACE);\n            if (!this.optionalCharacter($RBRACE)) {\n                this.rbracesExpected++;\n                do {\n                    var /** @type {?} */ quoted = this.next.isString();\n                    var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();\n                    keys.push({ key: key, quoted: quoted });\n                    this.expectCharacter($COLON);\n                    values.push(this.parsePipe());\n                } while (this.optionalCharacter($COMMA));\n                this.rbracesExpected--;\n                this.expectCharacter($RBRACE);\n            }\n            return new LiteralMap(this.span(start), keys, values);\n        };\n    /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n    ParseAST.prototype.parseAccessMemberOrMethodCall = /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n        function (receiver, isSafe) {\n            if (isSafe === void 0) {\n                isSafe = false;\n            }\n            var /** @type {?} */ start = receiver.span.start;\n            var /** @type {?} */ id = this.expectIdentifierOrKeyword();\n            if (this.optionalCharacter($LPAREN)) {\n                this.rparensExpected++;\n                var /** @type {?} */ args = this.parseCallArguments();\n                this.expectCharacter($RPAREN);\n                this.rparensExpected--;\n                var /** @type {?} */ span = this.span(start);\n                return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);\n            }\n            else {\n                if (isSafe) {\n                    if (this.optionalOperator(\"=\")) {\n                        this.error(\"The '?.' operator cannot be used in the assignment\");\n                        return new EmptyExpr(this.span(start));\n                    }\n                    else {\n                        return new SafePropertyRead(this.span(start), receiver, id);\n                    }\n                }\n                else {\n                    if (this.optionalOperator(\"=\")) {\n                        if (!this.parseAction) {\n                            this.error(\"Bindings cannot contain assignments\");\n                            return new EmptyExpr(this.span(start));\n                        }\n                        var /** @type {?} */ value = this.parseConditional();\n                        return new PropertyWrite(this.span(start), receiver, id, value);\n                    }\n                    else {\n                        return new PropertyRead(this.span(start), receiver, id);\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseCallArguments = /**\n     * @return {?}\n     */\n        function () {\n            if (this.next.isCharacter($RPAREN)) {\n                return [];\n            }\n            var /** @type {?} */ positionals = [];\n            do {\n                positionals.push(this.parsePipe());\n            } while (this.optionalCharacter($COMMA));\n            return /** @type {?} */ (positionals);\n        };\n    /**\n     * An identifier, a keyword, a string with an optional `-` inbetween.\n     */\n    /**\n     * An identifier, a keyword, a string with an optional `-` inbetween.\n     * @return {?}\n     */\n    ParseAST.prototype.expectTemplateBindingKey = /**\n     * An identifier, a keyword, a string with an optional `-` inbetween.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ result = \"\";\n            var /** @type {?} */ operatorFound = false;\n            do {\n                result += this.expectIdentifierOrKeywordOrString();\n                operatorFound = this.optionalOperator(\"-\");\n                if (operatorFound) {\n                    result += \"-\";\n                }\n            } while (operatorFound);\n            return result.toString();\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.parseTemplateBindings = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ bindings = [];\n            var /** @type {?} */ prefix = ((null));\n            var /** @type {?} */ warnings = [];\n            while (this.index < this.tokens.length) {\n                var /** @type {?} */ start = this.inputIndex;\n                var /** @type {?} */ keyIsVar = this.peekKeywordLet();\n                if (keyIsVar) {\n                    this.advance();\n                }\n                var /** @type {?} */ rawKey = this.expectTemplateBindingKey();\n                var /** @type {?} */ key = rawKey;\n                if (!keyIsVar) {\n                    if (prefix === null) {\n                        prefix = key;\n                    }\n                    else {\n                        key = prefix + key[0].toUpperCase() + key.substring(1);\n                    }\n                }\n                this.optionalCharacter($COLON);\n                var /** @type {?} */ name_2 = ((null));\n                var /** @type {?} */ expression = ((null));\n                if (keyIsVar) {\n                    if (this.optionalOperator(\"=\")) {\n                        name_2 = this.expectTemplateBindingKey();\n                    }\n                    else {\n                        name_2 = \"$implicit\";\n                    }\n                }\n                else if (this.peekKeywordAs()) {\n                    var /** @type {?} */ letStart = this.inputIndex;\n                    this.advance(); // consume `as`\n                    name_2 = rawKey;\n                    key = this.expectTemplateBindingKey(); // read local var name\n                    keyIsVar = true;\n                }\n                else if (this.next !== EOF && !this.peekKeywordLet()) {\n                    var /** @type {?} */ st = this.inputIndex;\n                    var /** @type {?} */ ast = this.parsePipe();\n                    var /** @type {?} */ source = this.input.substring(st - this.offset, this.inputIndex - this.offset);\n                    expression = new ASTWithSource(ast, source, this.location, this.errors);\n                }\n                bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));\n                if (this.peekKeywordAs() && !keyIsVar) {\n                    var /** @type {?} */ letStart = this.inputIndex;\n                    this.advance(); // consume `as`\n                    var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name\n                    bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));\n                }\n                if (!this.optionalCharacter($SEMICOLON)) {\n                    this.optionalCharacter($COMMA);\n                }\n            }\n            return new TemplateBindingParseResult(bindings, warnings, this.errors);\n        };\n    /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n    ParseAST.prototype.error = /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n        function (message, index) {\n            if (index === void 0) {\n                index = null;\n            }\n            this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n            this.skip();\n        };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ParseAST.prototype.locationText = /**\n     * @param {?=} index\n     * @return {?}\n     */\n        function (index) {\n            if (index === void 0) {\n                index = null;\n            }\n            if (index === null) {\n                index = this.index;\n            }\n            return index < this.tokens.length ? \"at column \" + (this.tokens[index].index + 1) + \" in\" : \"at the end of the expression\";\n        };\n    /**\n     * @return {?}\n     */\n    ParseAST.prototype.skip = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ n = this.next;\n            while (this.index < this.tokens.length &&\n                !n.isCharacter($SEMICOLON) &&\n                (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n                (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n                (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {\n                if (this.next.isError()) {\n                    this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));\n                }\n                this.advance();\n                n = this.next;\n            }\n        };\n    return ParseAST;\n}());\nvar SimpleExpressionChecker = /*@__PURE__*/ (function () {\n    function SimpleExpressionChecker() {\n        this.errors = [];\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    SimpleExpressionChecker.check = /**\n     * @param {?} ast\n     * @return {?}\n     */\n        function (ast) {\n            var /** @type {?} */ s = new SimpleExpressionChecker();\n            ast.visit(s);\n            return s.errors;\n        };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) {\n            this.visitAll(ast.expressions);\n        };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) {\n            this.visitAll(ast.values);\n        };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) {\n            this.errors.push(\"pipes\");\n        };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n        function (asts) {\n            var _this = this;\n            return asts.map(function (node) { return node.visit(_this); });\n        };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n        function (ast, context) { };\n    return SimpleExpressionChecker;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n *\n * \\@internal\n */\nvar /**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n *\n * \\@internal\n */ PlaceholderRegistry = /*@__PURE__*/ (function () {\n    function PlaceholderRegistry() {\n        this._placeHolderNameCounts = {};\n        this._signatureToName = {};\n    }\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getStartTagPlaceholderName = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n        function (tag, attrs, isVoid) {\n            var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\n            if (this._signatureToName[signature]) {\n                return this._signatureToName[signature];\n            }\n            var /** @type {?} */ upperTag = tag.toUpperCase();\n            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n            var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n            this._signatureToName[signature] = name;\n            return name;\n        };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = /**\n     * @param {?} tag\n     * @return {?}\n     */\n        function (tag) {\n            var /** @type {?} */ signature = this._hashClosingTag(tag);\n            if (this._signatureToName[signature]) {\n                return this._signatureToName[signature];\n            }\n            var /** @type {?} */ upperTag = tag.toUpperCase();\n            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n            var /** @type {?} */ name = this._generateUniqueName(\"CLOSE_\" + baseName);\n            this._signatureToName[signature] = name;\n            return name;\n        };\n    /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getPlaceholderName = /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n        function (name, content) {\n            var /** @type {?} */ upperName = name.toUpperCase();\n            var /** @type {?} */ signature = \"PH: \" + upperName + \"=\" + content;\n            if (this._signatureToName[signature]) {\n                return this._signatureToName[signature];\n            }\n            var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\n            this._signatureToName[signature] = uniqueName;\n            return uniqueName;\n        };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getUniquePlaceholder = /**\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n            return this._generateUniqueName(name.toUpperCase());\n        };\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashTag = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n        function (tag, attrs, isVoid) {\n            var /** @type {?} */ start = \"<\" + tag;\n            var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return \" \" + name + \"=\" + attrs[name]; }).join('');\n            var /** @type {?} */ end = isVoid ? '/>' : \"></\" + tag + \">\";\n            return start + strAttrs + end;\n        };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashClosingTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n        function (tag) { return this._hashTag(\"/\" + tag, {}, false); };\n    /**\n     * @param {?} base\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._generateUniqueName = /**\n     * @param {?} base\n     * @return {?}\n     */\n        function (base) {\n            var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\n            if (!seen) {\n                this._placeHolderNameCounts[base] = 1;\n                return base;\n            }\n            var /** @type {?} */ id = this._placeHolderNameCounts[base];\n            this._placeHolderNameCounts[base] = id + 1;\n            return base + \"_\" + id;\n        };\n    return PlaceholderRegistry;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _expParser = /*@__PURE__*/ new Parser$1(/*@__PURE__*/ new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n * @param {?} interpolationConfig\n * @return {?}\n */\nfunction createI18nMessageFactory(interpolationConfig) {\n    var /** @type {?} */ visitor = new I18nVisitor(_expParser, interpolationConfig);\n    return function (nodes, meaning, description, id) {\n        return visitor.toI18nMessage(nodes, meaning, description, id);\n    };\n}\nvar I18nVisitor = /*@__PURE__*/ (function () {\n    function I18nVisitor(_expressionParser, _interpolationConfig) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n    I18nVisitor.prototype.toI18nMessage = /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n        function (nodes, meaning, description, id) {\n            this._isIcu = nodes.length === 1 && nodes[0] instanceof Expansion;\n            this._icuDepth = 0;\n            this._placeholderRegistry = new PlaceholderRegistry();\n            this._placeholderToContent = {};\n            this._placeholderToMessage = {};\n            var /** @type {?} */ i18nodes = visitAll(this, nodes, {});\n            return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n        };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n        function (el, context) {\n            var /** @type {?} */ children = visitAll(this, el.children);\n            var /** @type {?} */ attrs = {};\n            el.attrs.forEach(function (attr) {\n                // Do not visit the attributes, translatable ones are top-level ASTs\n                attrs[attr.name] = attr.value;\n            });\n            var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;\n            var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n            this._placeholderToContent[startPhName] = el.sourceSpan ? /** @type {?} */ ((el.sourceSpan)).toString() : \"\";\n            var /** @type {?} */ closePhName = \"\";\n            if (!isVoid) {\n                closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n                this._placeholderToContent[closePhName] = \"</\" + el.name + \">\";\n            }\n            return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) {\n            return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) {\n            return null;\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var _this = this;\n            this._icuDepth++;\n            var /** @type {?} */ i18nIcuCases = {};\n            var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n            icu.cases.forEach(function (caze) {\n                i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);\n            });\n            this._icuDepth--;\n            if (this._isIcu || this._icuDepth > 0) {\n                // Returns an ICU node when:\n                // - the message (vs a part of the message) is an ICU message, or\n                // - the ICU message is nested.\n                var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(\"VAR_\" + icu.type);\n                i18nIcu.expressionPlaceholder = expPh;\n                this._placeholderToContent[expPh] = icu.switchValue;\n                return i18nIcu;\n            }\n            // Else returns a placeholder\n            // ICU placeholders should not be replaced with their original content but with the their\n            // translations. We need to create a new visitor (they are not re-entrant) to compute the\n            // message id.\n            // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(\"ICU\", icu.sourceSpan.toString());\n            var /** @type {?} */ visitor = new I18nVisitor(this._expressionParser, this._interpolationConfig);\n            this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], \"\", \"\", \"\");\n            return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n        };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    I18nVisitor.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (icuCase, context) {\n            throw new Error(\"Unreachable code\");\n        };\n    /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    I18nVisitor.prototype._visitTextWithInterpolation = /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n        function (text, sourceSpan) {\n            var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n            if (!splitInterpolation) {\n                // No expression, return a single text\n                return new Text$1(text, sourceSpan);\n            }\n            // Return a group of text + expressions\n            var /** @type {?} */ nodes = [];\n            var /** @type {?} */ container = new Container(nodes, sourceSpan);\n            var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;\n            for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\n                var /** @type {?} */ expression = splitInterpolation.expressions[i];\n                var /** @type {?} */ baseName = extractPlaceholderName(expression) || \"INTERPOLATION\";\n                var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n                if (splitInterpolation.strings[i].length) {\n                    // No need to add empty strings\n                    nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));\n                }\n                nodes.push(new Placeholder(expression, phName, sourceSpan));\n                this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n            }\n            // The last index contains no expression\n            var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\n            if (splitInterpolation.strings[lastStringIdx].length) {\n                nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));\n            }\n            return container;\n        };\n    return I18nVisitor;\n}());\nvar /** @type {?} */ _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _I18N_ATTR = \"i18n\";\nvar HtmlParser = /*@__PURE__*/ (function (_super) {\n    __extends(HtmlParser, _super);\n    function HtmlParser(interpolationConfig) {\n        if (interpolationConfig === void 0) {\n            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n        }\n        var _this = _super.call(this, getHtmlTagDefinition) || this;\n        _this.interpolationConfig = interpolationConfig;\n        return _this;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n    HtmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n        function (source, url, parseExpansionForms) {\n            if (parseExpansionForms === void 0) {\n                parseExpansionForms = false;\n            }\n            return _super.prototype.parse.call(this, source, url, parseExpansionForms, this.interpolationConfig);\n        };\n    /**\n     * Extract translatable messages from an html AST\n     */\n    /**\n     * Extract translatable messages from an html AST\n     * @param {?} nodes\n     * @return {?}\n     */\n    HtmlParser.prototype.extractMessages = /**\n     * Extract translatable messages from an html AST\n     * @param {?} nodes\n     * @return {?}\n     */\n        function (nodes) {\n            var /** @type {?} */ visitor = new Visitor$4([\"wrapper\"]);\n            // Construct a single fake root element\n            var /** @type {?} */ wrapper = new Element(\"wrapper\", [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);\n            return visitor.extract(wrapper, this.interpolationConfig);\n        };\n    /**\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} params\n     * @param {?=} metadata\n     * @param {?=} implicitTags\n     * @return {?}\n     */\n    HtmlParser.prototype.mergeTranslations = /**\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} params\n     * @param {?=} metadata\n     * @param {?=} implicitTags\n     * @return {?}\n     */\n        function (nodes, translations, params, metadata, implicitTags) {\n            if (implicitTags === void 0) {\n                implicitTags = [];\n            }\n            var /** @type {?} */ visitor = new Visitor$4(implicitTags);\n            // Construct a single fake root element\n            var /** @type {?} */ wrapper = new Element(\"wrapper\", [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);\n            return visitor.merge(wrapper, translations, this.interpolationConfig, params, metadata);\n        };\n    return HtmlParser;\n}(Parser));\nvar ExtractionResult = /*@__PURE__*/ (function () {\n    function ExtractionResult(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n    return ExtractionResult;\n}());\n/**\n * A container for translated messages\n */\nvar /**\n * A container for translated messages\n */ TranslationBundle = /*@__PURE__*/ (function () {\n    function TranslationBundle(i18nNodesByMsgId, digest, interpolationConfig, missingTranslationStrategy, mapperFactory, console) {\n        if (i18nNodesByMsgId === void 0) {\n            i18nNodesByMsgId = {};\n        }\n        this.i18nNodesByMsgId = i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this.i18nToHtml = new I18nToHtmlVisitor(i18nNodesByMsgId, digest, /** @type {?} */ ((mapperFactory)), missingTranslationStrategy, interpolationConfig, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} digest\n     * @param {?} createNameMapper\n     * @param {?} loadFct\n     * @param {?} missingTranslationStrategy\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    TranslationBundle.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} digest\n     * @param {?} createNameMapper\n     * @param {?} loadFct\n     * @param {?} missingTranslationStrategy\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n        function (content, url, digest, createNameMapper, loadFct, missingTranslationStrategy, interpolationConfig) {\n            if (interpolationConfig === void 0) {\n                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;\n            }\n            var /** @type {?} */ i18nNodesByMsgId = loadFct(content, url);\n            var /** @type {?} */ digestFn = function (m) { return digest(m); };\n            var /** @type {?} */ mapperFactory = function (m) { return ((createNameMapper(m))); };\n            return new TranslationBundle(i18nNodesByMsgId, digestFn, interpolationConfig, missingTranslationStrategy, mapperFactory, console);\n        };\n    // Returns the translation as HTML nodes from the given source message.\n    /**\n     * @param {?} srcMsg\n     * @param {?} params\n     * @return {?}\n     */\n    TranslationBundle.prototype.get = /**\n     * @param {?} srcMsg\n     * @param {?} params\n     * @return {?}\n     */\n        function (srcMsg, params) {\n            var /** @type {?} */ htmlRes = this.i18nToHtml.convert(srcMsg, params);\n            if (htmlRes.errors.length) {\n                throw new Error(htmlRes.errors.join(\"\\n\"));\n            }\n            return htmlRes.nodes;\n        };\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    TranslationBundle.prototype.has = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n        function (srcMsg) {\n            return this.digest(srcMsg) in this.i18nNodesByMsgId;\n        };\n    return TranslationBundle;\n}());\nvar I18nToHtmlVisitor = /*@__PURE__*/ (function () {\n    function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest, _mapperFactory, _missingTranslationStrategy, _interpolationConfig, _console) {\n        if (_i18nNodesByMsgId === void 0) {\n            _i18nNodesByMsgId = {};\n        }\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._interpolationConfig = _interpolationConfig;\n        this._console = _console;\n        this._contextStack = [];\n        this._errors = [];\n    }\n    /**\n     * @param {?} srcMsg\n     * @param {?} params\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.convert = /**\n     * @param {?} srcMsg\n     * @param {?} params\n     * @return {?}\n     */\n        function (srcMsg, params) {\n            this._contextStack.length = 0;\n            this._errors.length = 0;\n            this._params = params;\n            this._paramKeys = Object.keys(params);\n            // i18n to text\n            var /** @type {?} */ text = this.convertToText(srcMsg);\n            // text to html\n            var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;\n            var /** @type {?} */ htmlParser = new HtmlParser().parse(text, url, true);\n            return {\n                nodes: htmlParser.rootNodes,\n                errors: __spread(this._errors, htmlParser.errors)\n            };\n        };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n        function (text, context) {\n            return text.value;\n        };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n        function (container, context) {\n            var _this = this;\n            return container.children.map(function (n) { return n.visit(_this); }).join(\"\");\n        };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n        function (icu, context) {\n            var _this = this;\n            var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n            // TODO(vicb): Once all format switch to using expression placeholders\n            // we should throw when the placeholder is not in the source message\n            var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression)\n                ? this._srcMsg.placeholders[icu.expression]\n                : icu.expression;\n            return \"{\" + exp + \", \" + icu.type + \", \" + cases.join(\" \") + \"}\";\n        };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            var /** @type {?} */ phName = this._mapper(ph.name);\n            if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n                return this.convertToValue(this._srcMsg.placeholders[phName]);\n            }\n            if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n                return this.convertToText(this._srcMsg.placeholderToMessage[phName]);\n            }\n            this._addError(ph, \"Unknown placeholder \\\"\" + ph.name + \"\\\"\");\n            return \"\";\n        };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            var _this = this;\n            var /** @type {?} */ tag = \"\" + ph.tag;\n            var /** @type {?} */ attrs = Object.keys(ph.attrs)\n                .map(function (name) { return name + \"=\\\"\" + ph.attrs[name] + \"\\\"\"; })\n                .join(\" \");\n            if (ph.isVoid) {\n                return \"<\" + tag + \" \" + attrs + \"/>\";\n            }\n            var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join(\"\");\n            return \"<\" + tag + \" \" + attrs + \">\" + children + \"</\" + tag + \">\";\n        };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n        function (ph, context) {\n            // An ICU placeholder references the source message to be serialized\n            return this.convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n        };\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.convertToText = /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n        function (srcMsg) {\n            var _this = this;\n            var /** @type {?} */ id = this._digest(srcMsg);\n            var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n            var /** @type {?} */ nodes;\n            this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n            this._srcMsg = srcMsg;\n            if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n                // When there is a translation use its nodes as the source\n                // And create a mapper to convert serialized placeholder names to internal names\n                nodes = this._i18nNodesByMsgId[id];\n                this._mapper = function (name) { return (mapper ? /** @type {?} */ ((mapper.toInternalName(name))) : name); };\n            }\n            else {\n                // When no translation has been found\n                // - report an error / a warning / nothing,\n                // - use the nodes from the original message\n                // - placeholders are already internal and need no mapper\n                if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                    this._addError(srcMsg.nodes[0], \"Missing translation for message \\\"\" + id + \"\\\"\");\n                }\n                else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                    this._console.warn(\"Missing translation for message \\\"\" + id + \"\\\"\");\n                }\n                nodes = srcMsg.nodes;\n                this._mapper = function (name) { return name; };\n            }\n            var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join(\"\");\n            var /** @type {?} */ context = ((this._contextStack.pop()));\n            this._srcMsg = context.msg;\n            this._mapper = context.mapper;\n            return text;\n        };\n    /**\n     * @param {?} placeholder\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.convertToValue = /**\n     * @param {?} placeholder\n     * @return {?}\n     */\n        function (placeholder) {\n            var /** @type {?} */ param = placeholder.replace(this._interpolationConfig.start, \"\").replace(this._interpolationConfig.end, \"\");\n            return this._paramKeys.indexOf(param) !== -1 ? this._params[param] : placeholder;\n        };\n    /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype._addError = /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n        function (el, msg) {\n            this._errors.push(new I18nError(el.sourceSpan, msg));\n        };\n    return I18nToHtmlVisitor;\n}());\n/** @enum {number} */\nvar VisitorMode = /*@__PURE__*/ (function () {\n    var VisitorMode = {\n        Extract: 0,\n        Merge: 1,\n    };\n    VisitorMode[VisitorMode.Extract] = \"Extract\";\n    VisitorMode[VisitorMode.Merge] = \"Merge\";\n    return VisitorMode;\n}());\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */\nvar /**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */ Visitor$4 = /*@__PURE__*/ (function () {\n    function Visitor$$1(_implicitTags) {\n        if (_implicitTags === void 0) {\n            _implicitTags = [];\n        }\n        this._implicitTags = _implicitTags;\n        this.blockChildren = [];\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    /**\n     * Extracts the messages from the tree\n     * @param {?} node\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Visitor$$1.prototype.extract = /**\n     * Extracts the messages from the tree\n     * @param {?} node\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n        function (node, interpolationConfig) {\n            this.init(VisitorMode.Extract, interpolationConfig);\n            node.visit(this, null);\n            if (this.inI18nBlock) {\n                this._reportError(node, \"Unclosed block\");\n            }\n            return new ExtractionResult(this.messages, this.errors);\n        };\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} node\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @param {?} params\n     * @param {?=} metadata\n     * @return {?}\n     */\n    Visitor$$1.prototype.merge = /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} node\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @param {?} params\n     * @param {?=} metadata\n     * @return {?}\n     */\n        function (node, translations, interpolationConfig, params, metadata) {\n            if (metadata === void 0) {\n                metadata = {};\n            }\n            this.init(VisitorMode.Merge, interpolationConfig, params);\n            this.translations = translations;\n            this.metadata = metadata;\n            var /** @type {?} */ translatedNode = node.visit(this, null);\n            if (this.inI18nBlock) {\n                this._reportError(node, \"Unclosed block\");\n            }\n            return new ParseTreeResult(translatedNode.children, this.errors);\n        };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n        function (icuCase, context) {\n            // Parse cases for translatable html attributes\n            var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);\n            if (this.mode === VisitorMode.Merge) {\n                return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n            }\n        };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n        function (icu, context) {\n            this.mayBeAddBlockChildren(icu);\n            var /** @type {?} */ wasInIcu = this.inIcu;\n            if (!this.inIcu) {\n                // nested ICU messages should not be extracted but top-level translated as a whole\n                if (this.isInTranslatableSection) {\n                    this.addMessage([icu]);\n                }\n                this.inIcu = true;\n            }\n            var /** @type {?} */ cases = visitAll(this, icu.cases, context);\n            if (this.mode === VisitorMode.Merge) {\n                icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n            }\n            this.inIcu = wasInIcu;\n            return icu;\n        };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n        function (comment, context) {\n            return;\n        };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n        function (text, context) {\n            if (this.isInTranslatableSection) {\n                this.mayBeAddBlockChildren(text);\n            }\n            return text;\n        };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n        function (el, context) {\n            var _this = this;\n            this.mayBeAddBlockChildren(el);\n            this.depth++;\n            var /** @type {?} */ wasInI18nNode = this.inI18nNode;\n            var /** @type {?} */ wasInImplicitNode = this.inImplicitNode;\n            var /** @type {?} */ childNodes = [];\n            var /** @type {?} */ translatedChildNodes = ((undefined));\n            // Extract:\n            // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n            // - ICU messages\n            var /** @type {?} */ i18nAttr = getI18nAttr(el);\n            var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this.inIcu && !this.isInTranslatableSection;\n            var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n            this.inImplicitNode = wasInImplicitNode || isImplicit;\n            if (!this.isInTranslatableSection && !this.inIcu) {\n                if (i18nAttr || isTopLevelImplicit) {\n                    this.inI18nNode = true;\n                    var /** @type {?} */ message = ((this.addMessage(el.children, this.metadata)));\n                    translatedChildNodes = this.translateMessage(el, message);\n                }\n                if (this.mode === VisitorMode.Extract) {\n                    var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;\n                    if (isTranslatable) {\n                        this.openTranslatableSection(el);\n                    }\n                    visitAll(this, el.children);\n                    if (isTranslatable) {\n                        this._closeTranslatableSection(el, el.children);\n                    }\n                }\n            }\n            else {\n                if (i18nAttr || isTopLevelImplicit) {\n                    this._reportError(el, \"Could not mark an element as translatable inside a translatable section\");\n                }\n                if (this.mode === VisitorMode.Extract) {\n                    // Descend into child nodes for extraction\n                    visitAll(this, el.children);\n                }\n            }\n            if (this.mode === VisitorMode.Merge) {\n                var /** @type {?} */ visitNodes = translatedChildNodes || el.children;\n                visitNodes.forEach(function (child) {\n                    var /** @type {?} */ visited = child.visit(_this, context);\n                    if (visited && !_this.isInTranslatableSection) {\n                        // Do not add the children from translatable sections (= i18n blocks here)\n                        // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                        childNodes = childNodes.concat(visited);\n                    }\n                });\n            }\n            this.depth--;\n            this.inI18nNode = wasInI18nNode;\n            this.inImplicitNode = wasInImplicitNode;\n            if (this.mode === VisitorMode.Merge) {\n                return new Element(el.name, [], childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n            }\n            return null;\n        };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    Visitor$$1.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n        function (attribute, context) {\n            throw new Error(\"unreachable code\");\n        };\n    /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @param {?=} params\n     * @return {?}\n     */\n    Visitor$$1.prototype.init = /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @param {?=} params\n     * @return {?}\n     */\n        function (mode, interpolationConfig, params) {\n            if (params === void 0) {\n                params = {};\n            }\n            this.mode = mode;\n            this.inI18nBlock = false;\n            this.inI18nNode = false;\n            this.depth = 0;\n            this.inIcu = false;\n            this.msgCountAtSectionStart = undefined;\n            this.errors = [];\n            this.messages = [];\n            this.inImplicitNode = false;\n            this.createI18nMessage = createI18nMessageFactory(interpolationConfig);\n            this.params = params;\n        };\n    /**\n     * @param {?} ast\n     * @param {?=} __1\n     * @return {?}\n     */\n    Visitor$$1.prototype.addMessage = /**\n     * @param {?} ast\n     * @param {?=} __1\n     * @return {?}\n     */\n        function (ast, _a) {\n            var _b = _a === void 0 ? {} : _a, _c = _b.meaning, meaning = _c === void 0 ? \"\" : _c, _d = _b.description, description = _d === void 0 ? \"\" : _d, _e = _b.id, id = _e === void 0 ? \"\" : _e;\n            if (ast.length === 0 ||\n                (ast.length === 1 && ast[0] instanceof Attribute && !((ast[0])).value)) {\n                // Do not create empty messages\n                return null;\n            }\n            var /** @type {?} */ message = this.createI18nMessage(ast, meaning, description, id);\n            this.messages.push(message);\n            return message;\n        };\n    /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n    Visitor$$1.prototype.translateMessage = /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n        function (el, message) {\n            if (message && this.mode === VisitorMode.Merge) {\n                var /** @type {?} */ nodes = this.translations.get(message, this.params);\n                if (nodes) {\n                    return nodes;\n                }\n                this._reportError(el, \"Translation unavailable for message id=\\\"\" + this.translations.digest(message) + \"\\\"\");\n            }\n            return [];\n        };\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n    Visitor$$1.prototype.mayBeAddBlockChildren = /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            if (this.inI18nBlock && !this.inIcu && this.depth === this.blockStartDepth) {\n                this.blockChildren.push(node);\n            }\n        };\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n    Visitor$$1.prototype.openTranslatableSection = /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n        function (node) {\n            if (this.isInTranslatableSection) {\n                this._reportError(node, \"Unexpected section start\");\n            }\n            else {\n                this.msgCountAtSectionStart = this.messages.length;\n            }\n        };\n    Object.defineProperty(Visitor$$1.prototype, \"isInTranslatableSection\", {\n        get: /**\n         * A translatable section could be:\n         * - the content of translatable element,\n         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n         * @return {?}\n         */ function () {\n            return this.msgCountAtSectionStart !== void 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n    Visitor$$1.prototype._closeTranslatableSection = /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n        function (node, directChildren) {\n            if (!this.isInTranslatableSection) {\n                this._reportError(node, \"Unexpected section end\");\n                return;\n            }\n            var /** @type {?} */ startIndex = this.msgCountAtSectionStart;\n            var /** @type {?} */ significantChildren = directChildren.reduce(function (count, n) { return count + (n instanceof Comment ? 0 : 1); }, 0);\n            if (significantChildren === 1) {\n                for (var /** @type {?} */ i = this.messages.length - 1; i >= /** @type {?} */ ((startIndex)); i--) {\n                    var /** @type {?} */ ast = this.messages[i].nodes;\n                    if (!(ast.length === 1 && ast[0] instanceof Text$1)) {\n                        this.messages.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n            this.msgCountAtSectionStart = undefined;\n        };\n    /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n    Visitor$$1.prototype._reportError = /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n        function (node, msg) {\n            this.errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));\n        };\n    return Visitor$$1;\n}());\n/**\n * @param {?} p\n * @return {?}\n */\nfunction getI18nAttr(p) {\n    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MISSING_TRANSLATION_STRATEGY = /*@__PURE__*/ new InjectionToken(\"MissingTranslationStrategy\");\n/**\n * A speculative polyfill to use i18n code translations\n */\nvar I18n = /*@__PURE__*/ (function () {\n    function I18n(format, translations, locale, missingTranslationStrategy) {\n        if (missingTranslationStrategy === void 0) {\n            missingTranslationStrategy = MissingTranslationStrategy.Warning;\n        }\n        var /** @type {?} */ loadFct;\n        var /** @type {?} */ digest;\n        var /** @type {?} */ createMapper = function (message) { return null; };\n        format = (format || \"xlf\").toLowerCase();\n        switch (format) {\n            case \"xtb\":\n                loadFct = xtbLoadToI18n;\n                digest = xtbDigest;\n                createMapper = xtbMapper;\n                break;\n            case \"xliff2\":\n            case \"xlf2\":\n                loadFct = xliff2LoadToI18n;\n                digest = xliff2Digest;\n                break;\n            case \"xliff\":\n            case \"xlf\":\n                loadFct = xliffLoadToI18n;\n                digest = xliffDigest;\n                break;\n            default:\n                throw new Error(\"Unknown translations format \" + format);\n        }\n        var /** @type {?} */ htmlParser = new HtmlParser();\n        var /** @type {?} */ translationsBundle = TranslationBundle.load(translations, \"i18n\", digest, createMapper, loadFct, missingTranslationStrategy);\n        // todo use interpolation config\n        return function (def, params) {\n            if (params === void 0) {\n                params = {};\n            }\n            var /** @type {?} */ content = typeof def === \"string\" ? def : def.value;\n            var /** @type {?} */ metadata = {};\n            if (typeof def === \"object\") {\n                metadata[\"id\"] = def.id;\n                metadata[\"meaning\"] = def.meaning;\n                metadata[\"description\"] = def.description;\n            }\n            var /** @type {?} */ htmlParserResult = htmlParser.parse(content, \"\", true);\n            if (htmlParserResult.errors.length) {\n                throw htmlParserResult.errors;\n            }\n            var /** @type {?} */ mergedNodes = htmlParser.mergeTranslations(htmlParserResult.rootNodes, translationsBundle, params, metadata, [\"wrapper\"]);\n            return serializeNodes(mergedNodes.rootNodes, locale, params).join(\"\");\n        };\n    }\n    return I18n;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { I18n, MISSING_TRANSLATION_STRATEGY };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}