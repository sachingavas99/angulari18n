{"version":3,"file":"xml_helper.js","sourceRoot":"","sources":["../../../lib/src/serializers/xml_helper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ml from \"../ast/ast\";\n\nexport interface IVisitor {\n  visitTag(tag: Tag): any;\n  visitElement(element: ml.Element): any;\n  visitText(text: Text): any;\n  visitDeclaration(decl: Declaration): any;\n  visitDoctype(doctype: Doctype): any;\n}\n\nclass Visitor implements IVisitor {\n  visitTag(tag: Tag): string {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n    if (tag.children.length === 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join(\"\")}</${tag.name}>`;\n  }\n\n  visitText(text: Text): string {\n    return _escapeXml(text.value);\n  }\n\n  visitElement(element: ml.Element) {\n    const attrs = {};\n    element.attrs.forEach((attr: ml.Attribute) => {\n      attrs[attr.name] = attr.value;\n    });\n    const tag = new Tag(element.name, attrs, element.children as any);\n    return this.visitTag(tag);\n  }\n\n  visitDeclaration(decl: Declaration): string {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n\n  private _serializeAttributes(attrs: {[k: string]: string}) {\n    const strAttrs = Object.keys(attrs)\n      .map((name: string) => `${name}=\"${_escapeXml(attrs[name])}\"`)\n      .join(\" \");\n    return strAttrs.length > 0 ? \" \" + strAttrs : \"\";\n  }\n\n  visitDoctype(doctype: Doctype): any {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n}\n\nconst _visitor = new Visitor();\n\nexport function serialize(nodes: Node[]): string {\n  return nodes.map((node: Node): string => node.visit(_visitor)).join(\"\");\n}\n\nexport interface Node {\n  visit(visitor: IVisitor): any;\n}\n\nexport class Declaration implements Node {\n  constructor(public attrs: {[k: string]: string}) {}\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitDeclaration(this);\n  }\n}\n\nexport class Doctype implements Node {\n  constructor(public rootTag: string, public dtd: string) {}\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitDoctype(this);\n  }\n}\n\nexport class Tag implements Node {\n  constructor(public name: string, public attrs: {[k: string]: string} = {}, public children: Node[] = []) {}\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitTag(this);\n  }\n}\n\nexport class Text implements Node {\n  constructor(public value: string) {}\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitText(this);\n  }\n}\n\nexport class CR extends Text {\n  constructor(ws = 0) {\n    super(`\\n${new Array(ws + 1).join(\" \")}`);\n  }\n}\n\nconst _ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, \"&amp;\"],\n  [/\"/g, \"&quot;\"],\n  [/'/g, \"&apos;\"],\n  [/</g, \"&lt;\"],\n  [/>/g, \"&gt;\"]\n];\n\nfunction _escapeXml(text: string): string {\n  return _ESCAPED_CHARS.reduce((str: string, entry: [RegExp, string]) => str.replace(entry[0], entry[1]), text);\n}\n"]}