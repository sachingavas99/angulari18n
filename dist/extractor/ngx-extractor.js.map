{"version":3,"file":"ngx-extractor.js","sourceRoot":"","sources":["../../lib/extractor/ngx-extractor.ts"],"names":[],"mappings":";;;AAEA,+CAAuD;AACvD,6BAA6B;AAC7B,+BAA+B;AAC/B,2BAA6C;AAE7C,cAAqB,IAAI;IACvB,MAAM,GAAG,GAAG,KAAK;SACd,KAAK,CAAC,kEAAkE,CAAC;SACzE,IAAI,CAAC,MAAM,CAAC;SACZ,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC;SAClB,MAAM,CAAC,OAAO,EAAE;QACf,KAAK,EAAE,GAAG;QACV,QAAQ,EACN,4GAA4G;QAC9G,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG;QACxB,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,IAAI;KAChB,CAAC;SACD,KAAK,CAAC,OAAO,CAAC,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YACrC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,8EAA8E,IAAI,GAAG,CAAC,CAAC;YACzG,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;SACD,MAAM,CAAC,UAAU,EAAE;QAClB,KAAK,EAAE,GAAG;QACV,QAAQ,EACN,+HAA+H;QACjI,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;KACf,CAAC;SACD,MAAM,CAAC,QAAQ,EAAE;QAChB,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,eAAe;QACzB,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;KAChC,CAAC;SACD,MAAM,CAAC,QAAQ,EAAE;QAChB,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,oCAAoC;QAC9C,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,QAAQ;KACf,CAAC;SACD,WAAW,CAAC,IAAI,CAAC;SACjB,KAAK,CAAC,IAAI,CAAC,CAAC;IAEf,MAAM,QAAQ,GAAG,kBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,0BAAc,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9E,EAAE,CAAC,CAAC,CAAC,eAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,OAAO,qCAAqC,CAAC,CAAC;IACzE,CAAC;IACD,kBAAa,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;IACxD,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAtDD,oBAsDC;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport {getAst, getFileContent} from \"./src/extractor\";\nimport * as glob from \"glob\";\nimport * as yargs from \"yargs\";\nimport {existsSync, writeFileSync} from \"fs\";\n\nexport function main(args) {\n  const cli = yargs\n    .usage(\"Extract strings from files for translation.\\nUsage: $0 [options]\")\n    .help(\"help\")\n    .alias(\"help\", \"h\")\n    .option(\"input\", {\n      alias: \"i\",\n      describe:\n        \"Paths you would like to extract strings from. You can use path expansion, glob patterns and multiple paths\",\n      default: process.env.PWD,\n      type: \"array\",\n      normalize: true\n    })\n    .check(options => {\n      options.input.forEach((path: string) => {\n        const files = glob.sync(path);\n\n        if (!files || files.length === 0) {\n          throw new Error(`The path you supplied was not found or did not contain any matching file: '${path}'`);\n        }\n      });\n      return true;\n    })\n    .option(\"out-file\", {\n      alias: \"o\",\n      describe:\n        \"Path and name of the file where you would like to save extracted strings. If the file exists then the messages will be merged\",\n      type: \"string\",\n      normalize: true,\n      required: true\n    })\n    .option(\"format\", {\n      alias: \"f\",\n      describe: \"Output format\",\n      default: \"xlf\",\n      type: \"string\",\n      choices: [\"xlf\", \"xlf2\", \"xmb\"]\n    })\n    .option(\"locale\", {\n      alias: \"l\",\n      describe: \"Source language of the application\",\n      default: \"en\",\n      type: \"string\",\n    })\n    .exitProcess(true)\n    .parse(args);\n\n  const messages = getAst(cli.input);\n  const content = getFileContent(messages, cli.outFile, cli.format, cli.locale);\n  if (!existsSync(cli.outFile)) {\n    console.log(`File \"${cli.outFile}\" doesn't exist, it will be created`);\n  }\n  writeFileSync(cli.outFile, content, {encoding: \"utf8\"});\n  return 0;\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  process.exitCode = main(args);\n}\n"]}